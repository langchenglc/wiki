>  本篇介绍python中的logging模块；


logging是线程安全的

## 使用

### 1.基本使用
```
import logging
logging.info('info message')
logging.warning('warn message')
loggin.error('error message')
```
打印变量
```
a = 'var'
logging.info('%s is variable data',a)
```
### 2.输出到文件
```
import logging
logging.basicConfig(filename='example.log',level=logging.DEBUG)
logging.debug('This message should go to the log file')
logging.info('So should this')
logging.warning('And this, too')
```
更详细的打印到文件；
```
fmt = '%(asctime)s %(filename)s[line:%(lineno)d] %(levelname)s %(message)s'
    '''
    format: 指定输出的格式和内容，format可以输出很多有用信息，如上例所示:
     %(levelno)s: 打印日志级别的数值
     %(levelname)s: 打印日志级别名称
     %(pathname)s: 打印当前执行程序的路径，其实就是sys.argv[0]
     %(filename)s: 打印当前执行程序名
     %(funcName)s: 打印日志的当前函数
     %(lineno)d: 打印日志的当前行号
     %(asctime)s: 打印日志的时间
     %(thread)d: 打印线程ID
     %(threadName)s: 打印线程名称
     %(process)d: 打印进程ID
     %(message)s: 打印日志信息
     '''
datefmt = '%a,%d %b %Y %H:%M:%S'
    '''datefmt: 指定时间格式，同time.strftime()'''
filename = 'myqpp.log'
filemod = 'w'
    '''filemod: a代表append，w代表write，直接覆盖'''

logging.baseConfig(level=logging.Debug,format=fmt,datefmt=datefmt,filename=filename,filemod='a')
logging.debug('debug message')
logging.info('info message')
logging.warning('warn messsage')
logging.error('error message')
```
打印到控制台
```
import logging

# create logger
logger = logging.getLogger('simple_example')
logger.setLevel(logging.DEBUG)

# create console handler and set level to debug
ch = logging.StreamHandler()######################stdout
ch.setLevel(logging.DEBUG)

# create formatter
formatter = logging.Formatter('%(asctime)s - %(name)s - %(levelname)s - %(message)s')

# add formatter to ch
ch.setFormatter(formatter)

# add ch to logger
logger.addHandler(ch)

# 'application' code
logger.debug('debug message')
logger.info('info message')
logger.warn('warn message')
logger.error('error message')
logger.critical('critical message')
```

### 3. 使用logging.config模块配置日志

```

#logger.conf
###############################################
[loggers]
keys=root,example01,example02
[logger_root]
level=DEBUG
handlers=hand01,hand02
[logger_example01]
handlers=hand01,hand02
qualname=example01
propagate=0
[logger_example02]
handlers=hand01,hand03
qualname=example02
propagate=0
###############################################
[handlers]
keys=hand01,hand02,hand03
[handler_hand01]
class=StreamHandler
level=INFO
formatter=form02
args=(sys.stderr,)
[handler_hand02]
class=FileHandler
level=DEBUG
formatter=form01
args=('myapp.log', 'a')
[handler_hand03]
class=handlers.RotatingFileHandler
level=INFO
formatter=form02
args=('myapp.log', 'a', 10*1024*1024, 5)
###############################################
[formatters]
keys=form01,form02
[formatter_form01]
format=%(asctime)s %(filename)s[line:%(lineno)d] %(levelname)s %(message)s
datefmt=%a, %d %b %Y %H:%M:%S
[formatter_form02]
format=%(name)-12s: %(levelname)-8s %(message)s
datefmt=
```
```
import logging
import logging.config

logging.config.fileConfig("logger.conf")
logger = logging.getLogger("example02")

logger.debug('This is debug message')
logger.info('This is info message')
logger.warning('This is warning message')
```


## Logger,Handler,Filter,Formatter

Logger
:     Loggers向程序直接暴露使用接口

Handler
:    负责发送日志到合适的目的地

Filter
:    提供过滤功能

Formatter
:    配置输出的格式

### 1.Loggers

* `Logger.setLevel()` 设置日志级别
* `Logger.addHandler()   Logger.removeHandler() ` 设置handlers
* `Logger.addFilter()    Logger.removeFilter()`  设置filters
* `Logger.debug()...`
* `Logger.exception()  => Logger.error() + 堆栈信息`
* `getLogger()` 


### 2.Handlers

* `setLever()`  logger的setlevel()决定了什么级别的日志被发送到handler，handl*的日志级别决定了什么日志发送到这个handler处理;
* `setFormatter()`
* `addFilter()`
* 程序中不要自己实例化Handler;

### 3.Formatters

* `logging.Formatter.__init__(fmt=None,datefmt=None)` 接收两个参数；


### 日志数据流

![数据流](学习笔记:python:logging.png)

## 参考链接
[官方doc](https://docs.python.org/2/howto/logging.html)
[cnblog-python的日志logging模块学习](https://www.cnblogs.com/dkblog/archive/2011/08/26/2155018.html)