#项目中常见spring注解

>这次主要介绍spring mvc中参数绑定的注解

简介：根据处理的request的不同内容部分分为四类

1. 处理request body部分的注解：@RequestParam,@RequestBody;
2. 处理requet uri 部分（这里指uri template中variable，不含queryString部分）的注解：@PathVariable;
3. 处理request header部分的注解：@RequestHeader, @CookieValue;
4. 处理attribute类型是注解： @SessionAttributes, @ModelAttribute;



---

###一.@RequestParam
>该注解类型用于将指定的请求参数赋值给方法中的形参

@RequestParam注解支持的属性
|属性|类型|是否必要|说明|
|name|String|否|指定请求头绑定的名称|
|value|String|否|name属性的别名|
|required|Boolean|否|指示参数是否必须绑定|
|defaultValue|String|否|如果没有传递参数而使用的默认值|


@RequestParam用来处理Content-Type: 为 application/x-www-form-urlencoded编码的内容，提交方式GET、POST.
该注解主要参数：value用来指定要传入值的id名称；required默认是true，表示请求中一定要有相应的参数，否则将报404错误码；default默认值，表示如果请求中没有同名参数时的默认值，默认值可以是SpEL表达式，如“#{systemProperties['java.vm.version']}”。

例：http://localhost:8080/login?username=joven&password=123456



```java
@RequestMapping("/login")
public  ModelAndView go(@RequestParam("username") String username,
                        @RequestParam("password") String password){                        
        return .....;        
}
```
以上代码会将请求中的loginname参数的值"joven"赋给loginname变量，password参数的值"123456"赋给password变量

---

###@RequestBody
该注解常用来处理Content-Type: 不是application/x-www-form-urlencoded编码的内容，例如application/json, application/xml等；

```java
$.ajax({  
    type: "post",  
    contentType:"application/json",  
    url: "repairs/saveDispatches",  
    data: JSON.stringify(dispatchesDTO),  
    success: function(data){  
        if(!data.success){  
          alertError("派工失败");  
        }else{  
        alertSuccess("派工成功");  
    }  
}) 
```


```java
@RequestMapping(value="/saveUser",method=RequestMethod.POST) 
@ResponseBody  
public void saveUser(@RequestBody List<User> users,@RequestBody DispatchesDTO dispatchesDTO,) { 
   userService.batchSave(users); 
   dispatchesService.saveDispatches(dispatchesDTO);
} 
```

其实 @RequestBody接收的是一个Json对象的字符串，而不是一个Json对象。然而在ajax请求往往传的都是Json对象，后来发现用 JSON.stringify(data)的方式就能将对象变成字符串。同时ajax请求的时候也要指定dataType: "json",contentType:"application/json" 这样就可以轻易的将一个对象或者List传到Java端，使用@RequestBody即可绑定对象或者List.

---

###二.@PathVariable

>该注解类型可以非常方便地获得请求URL中的动态参数。注解只支持一个属性value，类型为String，表示绑定的名称，如果省略则默认绑定同名参数




```java
@RequestMapping("/{id}")  
public  GeResult  findById(@PathVariable  String id) {
       return  roleService. findById (Role.class,id);    }
```

当使用@RequestMapping URI template 样式映射时， 即 someUrl/{id}, 这时的id可通过 @Pathvariable注解绑定它传过来的值到方法的参数上。若方法参数名称和需要绑定的uri template中变量名称不一致，需要在@PathVariable("name")指定uri template中的名称


---

###三.@RequestHeader
>该注解类型用于将请求的头信息区数据映射到功能处理方法的参数上

@RequestHeader注解支持的属性
|属性|类型|是否必要|说明|
|name|String|否|指定请求头绑定的名称|
|value|String|否|name属性的别名|
|required|Boolean|否|指示参数是否必须绑定|
|defaultValue|String|否|如果没有传递参数而使用的默认值|


这是一个Request 的header部分：



|Host|localhost:8080|
|Accept|text/html,application/xhtml+xml,application/xml;q=0.9|
|Accept-Language|fr,en-gb;q=0.7,en;q=0.3|
|Accept-Encoding|gzip,deflate|
|Accept-Charset|ISO-8859-1,utf-8;q=0.7,*;q=0.7|
|Keep-Alive|300|


```java
@RequestMapping("/teat")
public void requestHeaderTest(@RequestHeader(value="Accept") String[] accepts){
}
```

以上配置自动将请求头“Accept”的值赋到accepts参数上

---
###@CookieValue
>该注解将请求的cookie数据映射到功能处理方法的参数上

@CookieValue注解支持的属性
|属性|类型|是否必要|说明|
|name|String|否|指定请求头绑定的名称|
|value|String|否|name属性的别名|
|required|Boolean|否|指示参数是否必须绑定|
|defaultValue|String|否|如果没有传递参数而使用的默认值|



JSESSIONID=415A4AC178C59DACE0B2C9CA727CDD84 

```java
@RequestMapping("/displayHeaderIndo.do")  
public  void  display(@CookieValue(value="JSESSIONID",defaultValue="")  String sessionId){
}
```

以上配置会自动将JSESSIONID值设置到sessionId参数上，defaultValue表示Cookie中没有JSESSIONID时默认为空


---

###四.@SessionAttributes
>该注解类型允许我们有选择地指定Model中哪些参数需要转存到HttpSession对象当中

@SessionAttributes注解支持的属性
|属性|类型|是否必要|说明|
|names|String[]|否|Model中属性的名称，即存储在HTTPSession当中的属性名称|
|value|String[]|否|names属性的别名|
|types|Class<?>[]|否|指示参数是否必须绑定|


**@SessionAttributes只能声明在类上，而不能声明在方法上**


```java
@Controller
@RequestMapping("/editPet.do")
@SessionAttributes("pet")  
public  class  EditPetForm{  }
```

还有如下写法
``@SessionAttributes(types={User.class),value="user")``


还可以设置多个对象到HTTPSession当中
``@SessionAttributes(types={User.class,Dept.class),value={"user","dept"})``


---

###@ModelAttribute
>该注解类型将请求参数绑定到Model对象


@ModelAttribute注解只支持一个属性Value,类型为String，表示绑定的属性名称


@ModelAttribute注释方式

1. 用于方法上：通常用来在处理@RequestMapping之前，为请求绑定需要从后台查询的model；
2. 用于参数上：用来通过名称对应，把相应名称的值绑定到注解的参数bean上；要绑定的值来源于：
A)@SessionAttributes 启用的attribute 对象上；
B)@ModelAttribute 用于方法上时指定的model对象；
C)上述两种情况都没有时，new一个需要绑定的bean对象，然后把request中按名称对应的方式把值绑定到bean中。
