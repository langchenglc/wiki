a:710:{i:0;a:3:{i:0;s:14:"document_start";i:1;a:0:{}i:2;i:0;}i:1;a:3:{i:0;s:10:"quote_open";i:1;a:0:{}i:2;i:0;}i:2;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:138:"正则表达式平时我们接触也使用过一些，但是一直没有比较深入的了解过。这次看看正则表达式的知识！";}i:2;i:0;}i:3;a:3:{i:0;s:6:"plugin";i:1;a:4:{i:0;s:21:"markdowku_blockquotes";i:1;b:1;i:2;i:1;i:3;s:141:"
> 正则表达式平时我们接触也使用过一些，但是一直没有比较深入的了解过。这次看看正则表达式的知识！";}i:2;i:0;}i:4;a:3:{i:0;s:11:"quote_close";i:1;a:0:{}i:2;i:141;}i:5;a:3:{i:0;s:6:"plugin";i:1;a:4:{i:0;s:21:"markdowku_blockquotes";i:1;b:1;i:2;i:4;i:3;s:2:"

";}i:2;i:141;}i:6;a:3:{i:0;s:6:"header";i:1;a:3:{i:0;s:12:"正则字符";i:1;i:2;i:2;i:144;}i:2;i:144;}i:7;a:3:{i:0;s:12:"section_open";i:1;a:1:{i:0;i:2;}i:2;i:144;}i:8;a:3:{i:0;s:6:"plugin";i:1;a:4:{i:0;s:19:"markdowku_headeratx";i:1;b:1;i:2;i:5;i:3;s:16:"
## 正则字符";}i:2;i:144;}i:9;a:3:{i:0;s:10:"table_open";i:1;a:3:{i:0;i:2;i:1;i:11;i:2;i:162;}i:2;i:161;}i:10;a:3:{i:0;s:13:"tablerow_open";i:1;a:0:{}i:2;i:161;}i:11;a:3:{i:0;s:14:"tablecell_open";i:1;a:3:{i:0;i:1;i:1;N;i:2;i:1;}i:2;i:161;}i:12;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:7:"字符 ";}i:2;i:163;}i:13;a:3:{i:0;s:15:"tablecell_close";i:1;a:0:{}i:2;i:170;}i:14;a:3:{i:0;s:14:"tablecell_open";i:1;a:3:{i:0;i:1;i:1;N;i:2;i:1;}i:2;i:170;}i:15;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:7:" 意义";}i:2;i:171;}i:16;a:3:{i:0;s:15:"tablecell_close";i:1;a:0:{}i:2;i:178;}i:17;a:3:{i:0;s:14:"tablerow_close";i:1;a:0:{}i:2;i:179;}i:18;a:3:{i:0;s:13:"tablerow_open";i:1;a:0:{}i:2;i:179;}i:19;a:3:{i:0;s:14:"tablecell_open";i:1;a:3:{i:0;i:1;i:1;N;i:2;i:1;}i:2;i:179;}i:20;a:3:{i:0;s:6:"plugin";i:1;a:4:{i:0;s:20:"markdowku_codespans1";i:1;a:1:{i:0;s:3:"`.`";}i:2;i:5;i:3;s:3:"`.`";}i:2;i:181;}i:21;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:1:" ";}i:2;i:184;}i:22;a:3:{i:0;s:15:"tablecell_close";i:1;a:0:{}i:2;i:185;}i:23;a:3:{i:0;s:14:"tablecell_open";i:1;a:3:{i:0;i:1;i:1;N;i:2;i:1;}i:2;i:185;}i:24;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:52:" 匹配不包括换行的任意字符，谨慎使用";}i:2;i:186;}i:25;a:3:{i:0;s:15:"tablecell_close";i:1;a:0:{}i:2;i:238;}i:26;a:3:{i:0;s:14:"tablerow_close";i:1;a:0:{}i:2;i:239;}i:27;a:3:{i:0;s:13:"tablerow_open";i:1;a:0:{}i:2;i:239;}i:28;a:3:{i:0;s:14:"tablecell_open";i:1;a:3:{i:0;i:1;i:1;N;i:2;i:1;}i:2;i:239;}i:29;a:3:{i:0;s:6:"plugin";i:1;a:4:{i:0;s:20:"markdowku_codespans1";i:1;a:1:{i:0;s:4:"`\s`";}i:2;i:5;i:3;s:4:"`\s`";}i:2;i:241;}i:30;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:1:" ";}i:2;i:245;}i:31;a:3:{i:0;s:15:"tablecell_close";i:1;a:0:{}i:2;i:246;}i:32;a:3:{i:0;s:14:"tablecell_open";i:1;a:3:{i:0;i:1;i:1;N;i:2;i:1;}i:2;i:246;}i:33;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:58:" 匹配空格，tab，换行;\S 相反  [\s\S]天下无敌";}i:2;i:247;}i:34;a:3:{i:0;s:15:"tablecell_close";i:1;a:0:{}i:2;i:305;}i:35;a:3:{i:0;s:14:"tablerow_close";i:1;a:0:{}i:2;i:306;}i:36;a:3:{i:0;s:13:"tablerow_open";i:1;a:0:{}i:2;i:306;}i:37;a:3:{i:0;s:14:"tablecell_open";i:1;a:3:{i:0;i:1;i:1;N;i:2;i:1;}i:2;i:306;}i:38;a:3:{i:0;s:6:"plugin";i:1;a:4:{i:0;s:20:"markdowku_codespans1";i:1;a:1:{i:0;s:3:"`\`";}i:2;i:5;i:3;s:3:"`\`";}i:2;i:308;}i:39;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:1:" ";}i:2;i:311;}i:40;a:3:{i:0;s:15:"tablecell_close";i:1;a:0:{}i:2;i:312;}i:41;a:3:{i:0;s:14:"tablecell_open";i:1;a:3:{i:0;i:1;i:1;N;i:2;i:1;}i:2;i:312;}i:42;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:7:" 转义";}i:2;i:313;}i:43;a:3:{i:0;s:15:"tablecell_close";i:1;a:0:{}i:2;i:320;}i:44;a:3:{i:0;s:14:"tablerow_close";i:1;a:0:{}i:2;i:321;}i:45;a:3:{i:0;s:13:"tablerow_open";i:1;a:0:{}i:2;i:321;}i:46;a:3:{i:0;s:14:"tablecell_open";i:1;a:3:{i:0;i:1;i:1;N;i:2;i:1;}i:2;i:321;}i:47;a:3:{i:0;s:6:"plugin";i:1;a:4:{i:0;s:20:"markdowku_codespans1";i:1;a:1:{i:0;s:4:"`[]`";}i:2;i:5;i:3;s:4:"`[]`";}i:2;i:323;}i:48;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:1:" ";}i:2;i:327;}i:49;a:3:{i:0;s:15:"tablecell_close";i:1;a:0:{}i:2;i:328;}i:50;a:3:{i:0;s:14:"tablecell_open";i:1;a:3:{i:0;i:1;i:1;N;i:2;i:1;}i:2;i:328;}i:51;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:1:" ";}i:2;i:329;}i:52;a:3:{i:0;s:6:"plugin";i:1;a:4:{i:0;s:20:"markdowku_codespans3";i:1;a:1:{i:0;s:247:"```单字符取一个，比如[abc]会匹配 a 或b 或c；如果[]里面加了^，代表排除这个字符；[^abc]表示不是a，不是b，也不是c;[0-9a-zA-Z];[ab|bz]=>[abz|]匹配abz或者|字符中的一个；[\u4e00-\u9fa5]匹配中文```";}i:2;i:5;i:3;s:247:"```单字符取一个，比如[abc]会匹配 a 或b 或c；如果[]里面加了^，代表排除这个字符；[^abc]表示不是a，不是b，也不是c;[0-9a-zA-Z];[ab|bz]=>[abz|]匹配abz或者|字符中的一个；[\u4e00-\u9fa5]匹配中文```";}i:2;i:330;}i:53;a:3:{i:0;s:15:"tablecell_close";i:1;a:0:{}i:2;i:577;}i:54;a:3:{i:0;s:14:"tablerow_close";i:1;a:0:{}i:2;i:578;}i:55;a:3:{i:0;s:13:"tablerow_open";i:1;a:0:{}i:2;i:578;}i:56;a:3:{i:0;s:14:"tablecell_open";i:1;a:3:{i:0;i:1;i:1;N;i:2;i:1;}i:2;i:578;}i:57;a:3:{i:0;s:6:"plugin";i:1;a:4:{i:0;s:20:"markdowku_codespans1";i:1;a:1:{i:0;s:3:"`^`";}i:2;i:5;i:3;s:3:"`^`";}i:2;i:580;}i:58;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:1:" ";}i:2;i:583;}i:59;a:3:{i:0;s:15:"tablecell_close";i:1;a:0:{}i:2;i:584;}i:60;a:3:{i:0;s:14:"tablecell_open";i:1;a:3:{i:0;i:1;i:1;N;i:2;i:1;}i:2;i:584;}i:61;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:25:" 限定开始符号；在";}i:2;i:585;}i:62;a:3:{i:0;s:6:"plugin";i:1;a:4:{i:0;s:20:"markdowku_codespans3";i:1;a:1:{i:0;s:10:"```[^X]```";}i:2;i:5;i:3;s:10:"```[^X]```";}i:2;i:610;}i:63;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:24:"表示是取反的意思";}i:2;i:620;}i:64;a:3:{i:0;s:15:"tablecell_close";i:1;a:0:{}i:2;i:644;}i:65;a:3:{i:0;s:14:"tablerow_close";i:1;a:0:{}i:2;i:645;}i:66;a:3:{i:0;s:13:"tablerow_open";i:1;a:0:{}i:2;i:645;}i:67;a:3:{i:0;s:14:"tablecell_open";i:1;a:3:{i:0;i:1;i:1;N;i:2;i:1;}i:2;i:645;}i:68;a:3:{i:0;s:6:"plugin";i:1;a:4:{i:0;s:20:"markdowku_codespans1";i:1;a:1:{i:0;s:3:"`$`";}i:2;i:5;i:3;s:3:"`$`";}i:2;i:647;}i:69;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:1:" ";}i:2;i:650;}i:70;a:3:{i:0;s:15:"tablecell_close";i:1;a:0:{}i:2;i:651;}i:71;a:3:{i:0;s:14:"tablecell_open";i:1;a:3:{i:0;i:1;i:1;N;i:2;i:1;}i:2;i:651;}i:72;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:22:" 限定结束符号；";}i:2;i:652;}i:73;a:3:{i:0;s:15:"tablecell_close";i:1;a:0:{}i:2;i:674;}i:74;a:3:{i:0;s:14:"tablerow_close";i:1;a:0:{}i:2;i:675;}i:75;a:3:{i:0;s:13:"tablerow_open";i:1;a:0:{}i:2;i:675;}i:76;a:3:{i:0;s:14:"tablecell_open";i:1;a:3:{i:0;i:1;i:1;N;i:2;i:1;}i:2;i:675;}i:77;a:3:{i:0;s:6:"plugin";i:1;a:4:{i:0;s:20:"markdowku_codespans1";i:1;a:1:{i:0;s:3:"`|`";}i:2;i:5;i:3;s:3:"`|`";}i:2;i:677;}i:78;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:1:" ";}i:2;i:680;}i:79;a:3:{i:0;s:15:"tablecell_close";i:1;a:0:{}i:2;i:681;}i:80;a:3:{i:0;s:14:"tablecell_open";i:1;a:3:{i:0;i:1;i:1;N;i:2;i:1;}i:2;i:681;}i:81;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:19:" 或；http/ftp/svn";}i:2;i:682;}i:82;a:3:{i:0;s:15:"tablecell_close";i:1;a:0:{}i:2;i:701;}i:83;a:3:{i:0;s:14:"tablerow_close";i:1;a:0:{}i:2;i:702;}i:84;a:3:{i:0;s:13:"tablerow_open";i:1;a:0:{}i:2;i:702;}i:85;a:3:{i:0;s:14:"tablecell_open";i:1;a:3:{i:0;i:1;i:1;N;i:2;i:1;}i:2;i:702;}i:86;a:3:{i:0;s:6:"plugin";i:1;a:4:{i:0;s:20:"markdowku_codespans1";i:1;a:1:{i:0;s:4:"`\b`";}i:2;i:5;i:3;s:4:"`\b`";}i:2;i:704;}i:87;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:1:" ";}i:2;i:708;}i:88;a:3:{i:0;s:15:"tablecell_close";i:1;a:0:{}i:2;i:709;}i:89;a:3:{i:0;s:14:"tablecell_open";i:1;a:3:{i:0;i:1;i:1;N;i:2;i:1;}i:2;i:709;}i:90;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:83:" 单词首尾，用来做单词边界处理  \bhi\b  匹配hi，不匹配high单词";}i:2;i:710;}i:91;a:3:{i:0;s:15:"tablecell_close";i:1;a:0:{}i:2;i:793;}i:92;a:3:{i:0;s:14:"tablerow_close";i:1;a:0:{}i:2;i:794;}i:93;a:3:{i:0;s:13:"tablerow_open";i:1;a:0:{}i:2;i:794;}i:94;a:3:{i:0;s:14:"tablecell_open";i:1;a:3:{i:0;i:1;i:1;N;i:2;i:1;}i:2;i:794;}i:95;a:3:{i:0;s:6:"plugin";i:1;a:4:{i:0;s:20:"markdowku_codespans1";i:1;a:1:{i:0;s:4:"`\d`";}i:2;i:5;i:3;s:4:"`\d`";}i:2;i:796;}i:96;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:1:" ";}i:2;i:800;}i:97;a:3:{i:0;s:15:"tablecell_close";i:1;a:0:{}i:2;i:801;}i:98;a:3:{i:0;s:14:"tablecell_open";i:1;a:3:{i:0;i:1;i:1;N;i:2;i:1;}i:2;i:801;}i:99;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:7:" 数字";}i:2;i:802;}i:100;a:3:{i:0;s:15:"tablecell_close";i:1;a:0:{}i:2;i:809;}i:101;a:3:{i:0;s:14:"tablerow_close";i:1;a:0:{}i:2;i:810;}i:102;a:3:{i:0;s:13:"tablerow_open";i:1;a:0:{}i:2;i:810;}i:103;a:3:{i:0;s:14:"tablecell_open";i:1;a:3:{i:0;i:1;i:1;N;i:2;i:1;}i:2;i:810;}i:104;a:3:{i:0;s:6:"plugin";i:1;a:4:{i:0;s:20:"markdowku_codespans1";i:1;a:1:{i:0;s:4:"`\w`";}i:2;i:5;i:3;s:4:"`\w`";}i:2;i:812;}i:105;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:1:" ";}i:2;i:816;}i:106;a:3:{i:0;s:15:"tablecell_close";i:1;a:0:{}i:2;i:817;}i:107;a:3:{i:0;s:14:"tablecell_open";i:1;a:3:{i:0;i:1;i:1;N;i:2;i:1;}i:2;i:817;}i:108;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:30:" 字符(字母数字下划线)";}i:2;i:818;}i:109;a:3:{i:0;s:15:"tablecell_close";i:1;a:0:{}i:2;i:848;}i:110;a:3:{i:0;s:14:"tablerow_close";i:1;a:0:{}i:2;i:849;}i:111;a:3:{i:0;s:11:"table_close";i:1;a:1:{i:0;i:849;}i:2;i:849;}i:112;a:3:{i:0;s:13:"section_close";i:1;a:0:{}i:2;i:850;}i:113;a:3:{i:0;s:6:"header";i:1;a:3:{i:0;s:9:"限定符";i:1;i:2;i:2;i:850;}i:2;i:850;}i:114;a:3:{i:0;s:12:"section_open";i:1;a:1:{i:0;i:2;}i:2;i:850;}i:115;a:3:{i:0;s:6:"plugin";i:1;a:4:{i:0;s:19:"markdowku_headeratx";i:1;b:1;i:2;i:5;i:3;s:13:"
## 限定符";}i:2;i:850;}i:116;a:3:{i:0;s:10:"table_open";i:1;a:3:{i:0;i:2;i:1;i:7;i:2;i:865;}i:2;i:864;}i:117;a:3:{i:0;s:13:"tablerow_open";i:1;a:0:{}i:2;i:864;}i:118;a:3:{i:0;s:14:"tablecell_open";i:1;a:3:{i:0;i:1;i:1;N;i:2;i:1;}i:2;i:864;}i:119;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:10:"限定符 ";}i:2;i:866;}i:120;a:3:{i:0;s:15:"tablecell_close";i:1;a:0:{}i:2;i:876;}i:121;a:3:{i:0;s:14:"tablecell_open";i:1;a:3:{i:0;i:1;i:1;N;i:2;i:1;}i:2;i:876;}i:122;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:7:" 意义";}i:2;i:877;}i:123;a:3:{i:0;s:15:"tablecell_close";i:1;a:0:{}i:2;i:884;}i:124;a:3:{i:0;s:14:"tablerow_close";i:1;a:0:{}i:2;i:885;}i:125;a:3:{i:0;s:13:"tablerow_open";i:1;a:0:{}i:2;i:885;}i:126;a:3:{i:0;s:14:"tablecell_open";i:1;a:3:{i:0;i:1;i:1;N;i:2;i:1;}i:2;i:885;}i:127;a:3:{i:0;s:6:"plugin";i:1;a:4:{i:0;s:20:"markdowku_codespans1";i:1;a:1:{i:0;s:3:"`*`";}i:2;i:5;i:3;s:3:"`*`";}i:2;i:887;}i:128;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:1:" ";}i:2;i:890;}i:129;a:3:{i:0;s:15:"tablecell_close";i:1;a:0:{}i:2;i:891;}i:130;a:3:{i:0;s:14:"tablecell_open";i:1;a:3:{i:0;i:1;i:1;N;i:2;i:1;}i:2;i:891;}i:131;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:16:" 无论多少次";}i:2;i:892;}i:132;a:3:{i:0;s:15:"tablecell_close";i:1;a:0:{}i:2;i:908;}i:133;a:3:{i:0;s:14:"tablerow_close";i:1;a:0:{}i:2;i:909;}i:134;a:3:{i:0;s:13:"tablerow_open";i:1;a:0:{}i:2;i:909;}i:135;a:3:{i:0;s:14:"tablecell_open";i:1;a:3:{i:0;i:1;i:1;N;i:2;i:1;}i:2;i:909;}i:136;a:3:{i:0;s:6:"plugin";i:1;a:4:{i:0;s:20:"markdowku_codespans1";i:1;a:1:{i:0;s:3:"`?`";}i:2;i:5;i:3;s:3:"`?`";}i:2;i:911;}i:137;a:3:{i:0;s:15:"tablecell_close";i:1;a:0:{}i:2;i:914;}i:138;a:3:{i:0;s:14:"tablecell_open";i:1;a:3:{i:0;i:1;i:1;N;i:2;i:1;}i:2;i:914;}i:139;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:98:" 0次或者1次  有还是没有；如果？加在限定符后面，就是改成了非贪婪模式";}i:2;i:915;}i:140;a:3:{i:0;s:15:"tablecell_close";i:1;a:0:{}i:2;i:1013;}i:141;a:3:{i:0;s:14:"tablerow_close";i:1;a:0:{}i:2;i:1014;}i:142;a:3:{i:0;s:13:"tablerow_open";i:1;a:0:{}i:2;i:1014;}i:143;a:3:{i:0;s:14:"tablecell_open";i:1;a:3:{i:0;i:1;i:1;N;i:2;i:1;}i:2;i:1014;}i:144;a:3:{i:0;s:6:"plugin";i:1;a:4:{i:0;s:20:"markdowku_codespans1";i:1;a:1:{i:0;s:3:"`+`";}i:2;i:5;i:3;s:3:"`+`";}i:2;i:1016;}i:145;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:1:" ";}i:2;i:1019;}i:146;a:3:{i:0;s:15:"tablecell_close";i:1;a:0:{}i:2;i:1020;}i:147;a:3:{i:0;s:14:"tablecell_open";i:1;a:3:{i:0;i:1;i:1;N;i:2;i:1;}i:2;i:1020;}i:148;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:16:" 至少有一次";}i:2;i:1021;}i:149;a:3:{i:0;s:15:"tablecell_close";i:1;a:0:{}i:2;i:1037;}i:150;a:3:{i:0;s:14:"tablerow_close";i:1;a:0:{}i:2;i:1038;}i:151;a:3:{i:0;s:13:"tablerow_open";i:1;a:0:{}i:2;i:1038;}i:152;a:3:{i:0;s:14:"tablecell_open";i:1;a:3:{i:0;i:1;i:1;N;i:2;i:1;}i:2;i:1038;}i:153;a:3:{i:0;s:6:"plugin";i:1;a:4:{i:0;s:20:"markdowku_codespans1";i:1;a:1:{i:0;s:5:"`{n}`";}i:2;i:5;i:3;s:5:"`{n}`";}i:2;i:1040;}i:154;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:1:" ";}i:2;i:1045;}i:155;a:3:{i:0;s:15:"tablecell_close";i:1;a:0:{}i:2;i:1046;}i:156;a:3:{i:0;s:14:"tablecell_open";i:1;a:3:{i:0;i:1;i:1;N;i:2;i:1;}i:2;i:1046;}i:157;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:5:" n次";}i:2;i:1047;}i:158;a:3:{i:0;s:15:"tablecell_close";i:1;a:0:{}i:2;i:1052;}i:159;a:3:{i:0;s:14:"tablerow_close";i:1;a:0:{}i:2;i:1053;}i:160;a:3:{i:0;s:13:"tablerow_open";i:1;a:0:{}i:2;i:1053;}i:161;a:3:{i:0;s:14:"tablecell_open";i:1;a:3:{i:0;i:1;i:1;N;i:2;i:1;}i:2;i:1053;}i:162;a:3:{i:0;s:6:"plugin";i:1;a:4:{i:0;s:20:"markdowku_codespans1";i:1;a:1:{i:0;s:7:"`{n,m}`";}i:2;i:5;i:3;s:7:"`{n,m}`";}i:2;i:1055;}i:163;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:1:" ";}i:2;i:1062;}i:164;a:3:{i:0;s:15:"tablecell_close";i:1;a:0:{}i:2;i:1063;}i:165;a:3:{i:0;s:14:"tablecell_open";i:1;a:3:{i:0;i:1;i:1;N;i:2;i:1;}i:2;i:1063;}i:166;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:12:" n次到m次";}i:2;i:1064;}i:167;a:3:{i:0;s:15:"tablecell_close";i:1;a:0:{}i:2;i:1076;}i:168;a:3:{i:0;s:14:"tablerow_close";i:1;a:0:{}i:2;i:1077;}i:169;a:3:{i:0;s:13:"tablerow_open";i:1;a:0:{}i:2;i:1077;}i:170;a:3:{i:0;s:14:"tablecell_open";i:1;a:3:{i:0;i:1;i:1;N;i:2;i:1;}i:2;i:1077;}i:171;a:3:{i:0;s:6:"plugin";i:1;a:4:{i:0;s:20:"markdowku_codespans1";i:1;a:1:{i:0;s:6:"`{n,}`";}i:2;i:5;i:3;s:6:"`{n,}`";}i:2;i:1079;}i:172;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:1:" ";}i:2;i:1085;}i:173;a:3:{i:0;s:15:"tablecell_close";i:1;a:0:{}i:2;i:1086;}i:174;a:3:{i:0;s:14:"tablecell_open";i:1;a:3:{i:0;i:1;i:1;N;i:2;i:1;}i:2;i:1086;}i:175;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:17:" 大于等于n次";}i:2;i:1087;}i:176;a:3:{i:0;s:15:"tablecell_close";i:1;a:0:{}i:2;i:1104;}i:177;a:3:{i:0;s:14:"tablerow_close";i:1;a:0:{}i:2;i:1105;}i:178;a:3:{i:0;s:11:"table_close";i:1;a:1:{i:0;i:1105;}i:2;i:1105;}i:179;a:3:{i:0;s:13:"section_close";i:1;a:0:{}i:2;i:1106;}i:180;a:3:{i:0;s:6:"header";i:1;a:3:{i:0;s:12:"匹配模式";i:1;i:2;i:2;i:1106;}i:2;i:1106;}i:181;a:3:{i:0;s:12:"section_open";i:1;a:1:{i:0;i:2;}i:2;i:1106;}i:182;a:3:{i:0;s:6:"plugin";i:1;a:4:{i:0;s:19:"markdowku_headeratx";i:1;b:1;i:2;i:5;i:3;s:16:"
## 匹配模式";}i:2;i:1106;}i:183;a:3:{i:0;s:6:"p_open";i:1;a:0:{}i:2;i:1106;}i:184;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:115:"1.贪婪模式
:    当正则表达式中包含能接受重复的限定符时，匹配尽可能多的字符(默认)";}i:2;i:1123;}i:185;a:3:{i:0;s:7:"p_close";i:1;a:0:{}i:2;i:1238;}i:186;a:3:{i:0;s:6:"p_open";i:1;a:0:{}i:2;i:1238;}i:187;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:152:"2.懒惰模式
:    当正则表达式中包含能接受重复的限定符时，匹配尽可能少的字符，只需在重复的限定符后面加？；";}i:2;i:1240;}i:188;a:3:{i:0;s:7:"p_close";i:1;a:0:{}i:2;i:1393;}i:189;a:3:{i:0;s:10:"table_open";i:1;a:3:{i:0;i:2;i:1;i:6;i:2;i:1394;}i:2;i:1393;}i:190;a:3:{i:0;s:13:"tablerow_open";i:1;a:0:{}i:2;i:1393;}i:191;a:3:{i:0;s:14:"tablecell_open";i:1;a:3:{i:0;i:1;i:1;s:4:"left";i:2;i:1;}i:2;i:1393;}i:192;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:29:"懒惰限定符代码/语法	";}i:2;i:1395;}i:193;a:3:{i:0;s:15:"tablecell_close";i:1;a:0:{}i:2;i:1424;}i:194;a:3:{i:0;s:14:"tablecell_open";i:1;a:3:{i:0;i:1;i:1;N;i:2;i:1;}i:2;i:1424;}i:195;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:7:" 描述";}i:2;i:1425;}i:196;a:3:{i:0;s:15:"tablecell_close";i:1;a:0:{}i:2;i:1432;}i:197;a:3:{i:0;s:14:"tablerow_close";i:1;a:0:{}i:2;i:1433;}i:198;a:3:{i:0;s:13:"tablerow_open";i:1;a:0:{}i:2;i:1433;}i:199;a:3:{i:0;s:14:"tablecell_open";i:1;a:3:{i:0;i:1;i:1;s:4:"left";i:2;i:1;}i:2;i:1433;}i:200;a:3:{i:0;s:6:"plugin";i:1;a:4:{i:0;s:20:"markdowku_codespans1";i:1;a:1:{i:0;s:4:"`*?`";}i:2;i:5;i:3;s:4:"`*?`";}i:2;i:1435;}i:201;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:1:"	";}i:2;i:1439;}i:202;a:3:{i:0;s:15:"tablecell_close";i:1;a:0:{}i:2;i:1440;}i:203;a:3:{i:0;s:14:"tablecell_open";i:1;a:3:{i:0;i:1;i:1;N;i:2;i:1;}i:2;i:1440;}i:204;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:50:" 重复0次或更多次，但尽可能的少重复";}i:2;i:1441;}i:205;a:3:{i:0;s:15:"tablecell_close";i:1;a:0:{}i:2;i:1491;}i:206;a:3:{i:0;s:14:"tablerow_close";i:1;a:0:{}i:2;i:1492;}i:207;a:3:{i:0;s:13:"tablerow_open";i:1;a:0:{}i:2;i:1492;}i:208;a:3:{i:0;s:14:"tablecell_open";i:1;a:3:{i:0;i:1;i:1;s:4:"left";i:2;i:1;}i:2;i:1492;}i:209;a:3:{i:0;s:6:"plugin";i:1;a:4:{i:0;s:20:"markdowku_codespans1";i:1;a:1:{i:0;s:4:"`+?`";}i:2;i:5;i:3;s:4:"`+?`";}i:2;i:1494;}i:210;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:1:"	";}i:2;i:1498;}i:211;a:3:{i:0;s:15:"tablecell_close";i:1;a:0:{}i:2;i:1499;}i:212;a:3:{i:0;s:14:"tablecell_open";i:1;a:3:{i:0;i:1;i:1;N;i:2;i:1;}i:2;i:1499;}i:213;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:52:" 重复一次或更多次，但尽可能的少重复";}i:2;i:1500;}i:214;a:3:{i:0;s:15:"tablecell_close";i:1;a:0:{}i:2;i:1552;}i:215;a:3:{i:0;s:14:"tablerow_close";i:1;a:0:{}i:2;i:1553;}i:216;a:3:{i:0;s:13:"tablerow_open";i:1;a:0:{}i:2;i:1553;}i:217;a:3:{i:0;s:14:"tablecell_open";i:1;a:3:{i:0;i:1;i:1;s:4:"left";i:2;i:1;}i:2;i:1553;}i:218;a:3:{i:0;s:6:"plugin";i:1;a:4:{i:0;s:20:"markdowku_codespans1";i:1;a:1:{i:0;s:4:"`??`";}i:2;i:5;i:3;s:4:"`??`";}i:2;i:1555;}i:219;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:1:"	";}i:2;i:1559;}i:220;a:3:{i:0;s:15:"tablecell_close";i:1;a:0:{}i:2;i:1560;}i:221;a:3:{i:0;s:14:"tablecell_open";i:1;a:3:{i:0;i:1;i:1;N;i:2;i:1;}i:2;i:1560;}i:222;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:47:" 重复0次或一次，但尽可能的少重复";}i:2;i:1561;}i:223;a:3:{i:0;s:15:"tablecell_close";i:1;a:0:{}i:2;i:1608;}i:224;a:3:{i:0;s:14:"tablerow_close";i:1;a:0:{}i:2;i:1609;}i:225;a:3:{i:0;s:13:"tablerow_open";i:1;a:0:{}i:2;i:1609;}i:226;a:3:{i:0;s:14:"tablecell_open";i:1;a:3:{i:0;i:1;i:1;s:4:"left";i:2;i:1;}i:2;i:1609;}i:227;a:3:{i:0;s:6:"plugin";i:1;a:4:{i:0;s:20:"markdowku_codespans1";i:1;a:1:{i:0;s:7:"`{n,}?`";}i:2;i:5;i:3;s:7:"`{n,}?`";}i:2;i:1611;}i:228;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:1:"	";}i:2;i:1618;}i:229;a:3:{i:0;s:15:"tablecell_close";i:1;a:0:{}i:2;i:1619;}i:230;a:3:{i:0;s:14:"tablecell_open";i:1;a:3:{i:0;i:1;i:1;N;i:2;i:1;}i:2;i:1619;}i:231;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:50:" 重复n次或更多次，但尽可能的少重复";}i:2;i:1620;}i:232;a:3:{i:0;s:15:"tablecell_close";i:1;a:0:{}i:2;i:1670;}i:233;a:3:{i:0;s:14:"tablerow_close";i:1;a:0:{}i:2;i:1671;}i:234;a:3:{i:0;s:13:"tablerow_open";i:1;a:0:{}i:2;i:1671;}i:235;a:3:{i:0;s:14:"tablecell_open";i:1;a:3:{i:0;i:1;i:1;s:4:"left";i:2;i:1;}i:2;i:1671;}i:236;a:3:{i:0;s:6:"plugin";i:1;a:4:{i:0;s:20:"markdowku_codespans1";i:1;a:1:{i:0;s:8:"`{n,m}?`";}i:2;i:5;i:3;s:8:"`{n,m}?`";}i:2;i:1673;}i:237;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:1:"	";}i:2;i:1681;}i:238;a:3:{i:0;s:15:"tablecell_close";i:1;a:0:{}i:2;i:1682;}i:239;a:3:{i:0;s:14:"tablecell_open";i:1;a:3:{i:0;i:1;i:1;N;i:2;i:1;}i:2;i:1682;}i:240;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:42:" 重复n到m次，但尽可能的少重复";}i:2;i:1683;}i:241;a:3:{i:0;s:15:"tablecell_close";i:1;a:0:{}i:2;i:1725;}i:242;a:3:{i:0;s:14:"tablerow_close";i:1;a:0:{}i:2;i:1726;}i:243;a:3:{i:0;s:11:"table_close";i:1;a:1:{i:0;i:1726;}i:2;i:1726;}i:244;a:3:{i:0;s:13:"section_close";i:1;a:0:{}i:2;i:1728;}i:245;a:3:{i:0;s:6:"header";i:1;a:3:{i:0;s:15:"模式修正符";i:1;i:2;i:2;i:1728;}i:2;i:1728;}i:246;a:3:{i:0;s:12:"section_open";i:1;a:1:{i:0;i:2;}i:2;i:1728;}i:247;a:3:{i:0;s:6:"plugin";i:1;a:4:{i:0;s:19:"markdowku_headeratx";i:1;b:1;i:2;i:5;i:3;s:19:"
## 模式修正符";}i:2;i:1728;}i:248;a:3:{i:0;s:6:"p_open";i:1;a:0:{}i:2;i:1728;}i:249;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:109:"正则表达式中的模式修正符有i,g,m,s,x,e  他们可以组合使用
(?imnsx-imnsx)  启用-不启用";}i:2;i:1749;}i:250;a:3:{i:0;s:7:"p_close";i:1;a:0:{}i:2;i:1859;}i:251;a:3:{i:0;s:10:"table_open";i:1;a:3:{i:0;i:2;i:1;i:11;i:2;i:1860;}i:2;i:1859;}i:252;a:3:{i:0;s:13:"tablerow_open";i:1;a:0:{}i:2;i:1859;}i:253;a:3:{i:0;s:14:"tablecell_open";i:1;a:3:{i:0;i:1;i:1;s:4:"left";i:2;i:1;}i:2;i:1859;}i:254;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:16:"模式修正符	";}i:2;i:1861;}i:255;a:3:{i:0;s:15:"tablecell_close";i:1;a:0:{}i:2;i:1877;}i:256;a:3:{i:0;s:14:"tablecell_open";i:1;a:3:{i:0;i:1;i:1;N;i:2;i:1;}i:2;i:1877;}i:257;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:7:" 说明";}i:2;i:1878;}i:258;a:3:{i:0;s:15:"tablecell_close";i:1;a:0:{}i:2;i:1885;}i:259;a:3:{i:0;s:14:"tablerow_close";i:1;a:0:{}i:2;i:1886;}i:260;a:3:{i:0;s:13:"tablerow_open";i:1;a:0:{}i:2;i:1886;}i:261;a:3:{i:0;s:14:"tablecell_open";i:1;a:3:{i:0;i:1;i:1;s:4:"left";i:2;i:1;}i:2;i:1886;}i:262;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:2:"i	";}i:2;i:1888;}i:263;a:3:{i:0;s:15:"tablecell_close";i:1;a:0:{}i:2;i:1890;}i:264;a:3:{i:0;s:14:"tablecell_open";i:1;a:3:{i:0;i:1;i:1;N;i:2;i:1;}i:2;i:1890;}i:265;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:52:" 表示在和模式进行匹配进不区分大小写";}i:2;i:1891;}i:266;a:3:{i:0;s:15:"tablecell_close";i:1;a:0:{}i:2;i:1943;}i:267;a:3:{i:0;s:14:"tablerow_close";i:1;a:0:{}i:2;i:1944;}i:268;a:3:{i:0;s:13:"tablerow_open";i:1;a:0:{}i:2;i:1944;}i:269;a:3:{i:0;s:14:"tablecell_open";i:1;a:3:{i:0;i:1;i:1;s:4:"left";i:2;i:1;}i:2;i:1944;}i:270;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:2:"m	";}i:2;i:1946;}i:271;a:3:{i:0;s:15:"tablecell_close";i:1;a:0:{}i:2;i:1948;}i:272;a:3:{i:0;s:14:"tablecell_open";i:1;a:3:{i:0;i:1;i:1;N;i:2;i:1;}i:2;i:1948;}i:273;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:31:" 将模式视为多行，使用";}i:2;i:1949;}i:274;a:3:{i:0;s:6:"plugin";i:1;a:4:{i:0;s:20:"markdowku_codespans1";i:1;a:1:{i:0;s:3:"`^`";}i:2;i:5;i:3;s:3:"`^`";}i:2;i:1980;}i:275;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:3:"和";}i:2;i:1983;}i:276;a:3:{i:0;s:6:"plugin";i:1;a:4:{i:0;s:20:"markdowku_codespans1";i:1;a:1:{i:0;s:3:"`$`";}i:2;i:5;i:3;s:3:"`$`";}i:2;i:1986;}i:277;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:60:"表示任何一行都可以以正则表达式开始或结束";}i:2;i:1989;}i:278;a:3:{i:0;s:15:"tablecell_close";i:1;a:0:{}i:2;i:2049;}i:279;a:3:{i:0;s:14:"tablerow_close";i:1;a:0:{}i:2;i:2050;}i:280;a:3:{i:0;s:13:"tablerow_open";i:1;a:0:{}i:2;i:2050;}i:281;a:3:{i:0;s:14:"tablecell_open";i:1;a:3:{i:0;i:1;i:1;s:4:"left";i:2;i:1;}i:2;i:2050;}i:282;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:2:"s	";}i:2;i:2052;}i:283;a:3:{i:0;s:15:"tablecell_close";i:1;a:0:{}i:2;i:2054;}i:284;a:3:{i:0;s:14:"tablecell_open";i:1;a:3:{i:0;i:1;i:1;N;i:2;i:1;}i:2;i:2054;}i:285;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:61:" 如果没有使用这个模式修正符号，元字符中的";}i:2;i:2055;}i:286;a:3:{i:0;s:18:"doublequoteopening";i:1;a:0:{}i:2;i:2116;}i:287;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:1:".";}i:2;i:2117;}i:288;a:3:{i:0;s:18:"doublequoteclosing";i:1;a:0:{}i:2;i:2118;}i:289;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:55:"默认不能表示换行符号,将字符串视为单行";}i:2;i:2119;}i:290;a:3:{i:0;s:15:"tablecell_close";i:1;a:0:{}i:2;i:2174;}i:291;a:3:{i:0;s:14:"tablerow_close";i:1;a:0:{}i:2;i:2175;}i:292;a:3:{i:0;s:13:"tablerow_open";i:1;a:0:{}i:2;i:2175;}i:293;a:3:{i:0;s:14:"tablecell_open";i:1;a:3:{i:0;i:1;i:1;s:4:"left";i:2;i:1;}i:2;i:2175;}i:294;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:2:"x	";}i:2;i:2177;}i:295;a:3:{i:0;s:15:"tablecell_close";i:1;a:0:{}i:2;i:2179;}i:296;a:3:{i:0;s:14:"tablecell_open";i:1;a:3:{i:0;i:1;i:1;N;i:2;i:1;}i:2;i:2179;}i:297;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:37:" 表示模式中的空白忽略不计";}i:2;i:2180;}i:298;a:3:{i:0;s:15:"tablecell_close";i:1;a:0:{}i:2;i:2217;}i:299;a:3:{i:0;s:14:"tablerow_close";i:1;a:0:{}i:2;i:2218;}i:300;a:3:{i:0;s:13:"tablerow_open";i:1;a:0:{}i:2;i:2218;}i:301;a:3:{i:0;s:14:"tablecell_open";i:1;a:3:{i:0;i:1;i:1;s:4:"left";i:2;i:1;}i:2;i:2218;}i:302;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:2:"e	";}i:2;i:2220;}i:303;a:3:{i:0;s:15:"tablecell_close";i:1;a:0:{}i:2;i:2222;}i:304;a:3:{i:0;s:14:"tablecell_open";i:1;a:3:{i:0;i:1;i:1;N;i:2;i:1;}i:2;i:2222;}i:305;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:114:" 正则表达式必须使用在preg_replace替换字符串的函数中时才可以使用(讲这个函数时再说)";}i:2;i:2223;}i:306;a:3:{i:0;s:15:"tablecell_close";i:1;a:0:{}i:2;i:2337;}i:307;a:3:{i:0;s:14:"tablerow_close";i:1;a:0:{}i:2;i:2338;}i:308;a:3:{i:0;s:13:"tablerow_open";i:1;a:0:{}i:2;i:2338;}i:309;a:3:{i:0;s:14:"tablecell_open";i:1;a:3:{i:0;i:1;i:1;s:4:"left";i:2;i:1;}i:2;i:2338;}i:310;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:2:"A	";}i:2;i:2340;}i:311;a:3:{i:0;s:15:"tablecell_close";i:1;a:0:{}i:2;i:2342;}i:312;a:3:{i:0;s:14:"tablecell_open";i:1;a:3:{i:0;i:1;i:1;N;i:2;i:1;}i:2;i:2342;}i:313;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:46:" 以模式字符串开头，相当于元字符";}i:2;i:2343;}i:314;a:3:{i:0;s:6:"plugin";i:1;a:4:{i:0;s:20:"markdowku_codespans3";i:1;a:1:{i:0;s:7:"```^```";}i:2;i:5;i:3;s:7:"```^```";}i:2;i:2389;}i:315;a:3:{i:0;s:15:"tablecell_close";i:1;a:0:{}i:2;i:2396;}i:316;a:3:{i:0;s:14:"tablerow_close";i:1;a:0:{}i:2;i:2397;}i:317;a:3:{i:0;s:13:"tablerow_open";i:1;a:0:{}i:2;i:2397;}i:318;a:3:{i:0;s:14:"tablecell_open";i:1;a:3:{i:0;i:1;i:1;s:4:"left";i:2;i:1;}i:2;i:2397;}i:319;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:2:"Z	";}i:2;i:2399;}i:320;a:3:{i:0;s:15:"tablecell_close";i:1;a:0:{}i:2;i:2401;}i:321;a:3:{i:0;s:14:"tablecell_open";i:1;a:3:{i:0;i:1;i:1;N;i:2;i:1;}i:2;i:2401;}i:322;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:46:" 以模式字符串结尾，相当于元字符";}i:2;i:2402;}i:323;a:3:{i:0;s:6:"plugin";i:1;a:4:{i:0;s:20:"markdowku_codespans3";i:1;a:1:{i:0;s:7:"```$```";}i:2;i:5;i:3;s:7:"```$```";}i:2;i:2448;}i:324;a:3:{i:0;s:15:"tablecell_close";i:1;a:0:{}i:2;i:2455;}i:325;a:3:{i:0;s:14:"tablerow_close";i:1;a:0:{}i:2;i:2456;}i:326;a:3:{i:0;s:13:"tablerow_open";i:1;a:0:{}i:2;i:2456;}i:327;a:3:{i:0;s:14:"tablecell_open";i:1;a:3:{i:0;i:1;i:1;s:4:"left";i:2;i:1;}i:2;i:2456;}i:328;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:2:"U	";}i:2;i:2458;}i:329;a:3:{i:0;s:15:"tablecell_close";i:1;a:0:{}i:2;i:2460;}i:330;a:3:{i:0;s:14:"tablecell_open";i:1;a:3:{i:0;i:1;i:1;N;i:2;i:1;}i:2;i:2460;}i:331;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:103:" 正则表达式的特点：就是比较“贪婪”，使用该模式修正符可以取消贪婪模式";}i:2;i:2461;}i:332;a:3:{i:0;s:15:"tablecell_close";i:1;a:0:{}i:2;i:2564;}i:333;a:3:{i:0;s:14:"tablerow_close";i:1;a:0:{}i:2;i:2565;}i:334;a:3:{i:0;s:13:"tablerow_open";i:1;a:0:{}i:2;i:2565;}i:335;a:3:{i:0;s:14:"tablecell_open";i:1;a:3:{i:0;i:1;i:1;s:4:"left";i:2;i:1;}i:2;i:2565;}i:336;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:4:"g   ";}i:2;i:2567;}i:337;a:3:{i:0;s:15:"tablecell_close";i:1;a:0:{}i:2;i:2571;}i:338;a:3:{i:0;s:14:"tablecell_open";i:1;a:3:{i:0;i:1;i:1;N;i:2;i:1;}i:2;i:2571;}i:339;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:13:" 全局匹配";}i:2;i:2572;}i:340;a:3:{i:0;s:15:"tablecell_close";i:1;a:0:{}i:2;i:2585;}i:341;a:3:{i:0;s:14:"tablerow_close";i:1;a:0:{}i:2;i:2586;}i:342;a:3:{i:0;s:13:"tablerow_open";i:1;a:0:{}i:2;i:2586;}i:343;a:3:{i:0;s:14:"tablecell_open";i:1;a:3:{i:0;i:1;i:1;s:4:"left";i:2;i:1;}i:2;i:2586;}i:344;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:4:"D   ";}i:2;i:2588;}i:345;a:3:{i:0;s:15:"tablecell_close";i:1;a:0:{}i:2;i:2592;}i:346;a:3:{i:0;s:14:"tablecell_open";i:1;a:3:{i:0;i:1;i:1;N;i:2;i:1;}i:2;i:2592;}i:347;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:47:" 匹配时限定$匹配出来的不可有换行";}i:2;i:2593;}i:348;a:3:{i:0;s:15:"tablecell_close";i:1;a:0:{}i:2;i:2640;}i:349;a:3:{i:0;s:14:"tablerow_close";i:1;a:0:{}i:2;i:2641;}i:350;a:3:{i:0;s:11:"table_close";i:1;a:1:{i:0;i:2641;}i:2;i:2641;}i:351;a:3:{i:0;s:13:"section_close";i:1;a:0:{}i:2;i:2643;}i:352;a:3:{i:0;s:6:"header";i:1;a:3:{i:0;s:6:"分组";i:1;i:2;i:2;i:2643;}i:2;i:2643;}i:353;a:3:{i:0;s:12:"section_open";i:1;a:1:{i:0;i:2;}i:2;i:2643;}i:354;a:3:{i:0;s:6:"plugin";i:1;a:4:{i:0;s:19:"markdowku_headeratx";i:1;b:1;i:2;i:5;i:3;s:10:"
## 分组";}i:2;i:2643;}i:355;a:3:{i:0;s:10:"listu_open";i:1;a:0:{}i:2;i:2653;}i:356;a:3:{i:0;s:13:"listitem_open";i:1;a:1:{i:0;i:1;}i:2;i:2653;}i:357;a:3:{i:0;s:16:"listcontent_open";i:1;a:0:{}i:2;i:2653;}i:358;a:3:{i:0;s:6:"plugin";i:1;a:4:{i:0;s:16:"markdowku_ulists";i:1;b:1;i:2;i:1;i:3;s:4:"

* ";}i:2;i:2653;}i:359;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:20:"分组符号（）  ";}i:2;i:2657;}i:360;a:3:{i:0;s:6:"plugin";i:1;a:4:{i:0;s:16:"markdowku_ulists";i:1;b:1;i:2;i:3;i:3;s:20:"分组符号（）  ";}i:2;i:2657;}i:361;a:3:{i:0;s:6:"entity";i:1;a:1:{i:0;s:2:"=>";}i:2;i:2677;}i:362;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:48:" （\d{1,3}.）{3}\d{1,3}简单的匹配IP地址";}i:2;i:2679;}i:363;a:3:{i:0;s:6:"plugin";i:1;a:4:{i:0;s:16:"markdowku_ulists";i:1;b:1;i:2;i:3;i:3;s:48:" （\d{1,3}.）{3}\d{1,3}简单的匹配IP地址";}i:2;i:2679;}i:364;a:3:{i:0;s:17:"listcontent_close";i:1;a:0:{}i:2;i:2727;}i:365;a:3:{i:0;s:14:"listitem_close";i:1;a:0:{}i:2;i:2727;}i:366;a:3:{i:0;s:13:"listitem_open";i:1;a:1:{i:0;i:1;}i:2;i:2727;}i:367;a:3:{i:0;s:16:"listcontent_open";i:1;a:0:{}i:2;i:2727;}i:368;a:3:{i:0;s:6:"plugin";i:1;a:4:{i:0;s:16:"markdowku_ulists";i:1;b:1;i:2;i:2;i:3;s:3:"
* ";}i:2;i:2727;}i:369;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:51:"分组按照形式又分成捕获组和非捕获组";}i:2;i:2730;}i:370;a:3:{i:0;s:6:"plugin";i:1;a:4:{i:0;s:16:"markdowku_ulists";i:1;b:1;i:2;i:3;i:3;s:51:"分组按照形式又分成捕获组和非捕获组";}i:2;i:2730;}i:371;a:3:{i:0;s:17:"listcontent_close";i:1;a:0:{}i:2;i:2781;}i:372;a:3:{i:0;s:14:"listitem_close";i:1;a:0:{}i:2;i:2781;}i:373;a:3:{i:0;s:11:"listu_close";i:1;a:0:{}i:2;i:2781;}i:374;a:3:{i:0;s:6:"plugin";i:1;a:4:{i:0;s:16:"markdowku_ulists";i:1;b:1;i:2;i:4;i:3;s:1:"
";}i:2;i:2781;}i:375;a:3:{i:0;s:13:"section_close";i:1;a:0:{}i:2;i:2782;}i:376;a:3:{i:0;s:6:"header";i:1;a:3:{i:0;s:9:"捕获组";i:1;i:3;i:2;i:2782;}i:2;i:2782;}i:377;a:3:{i:0;s:12:"section_open";i:1;a:1:{i:0;i:3;}i:2;i:2782;}i:378;a:3:{i:0;s:6:"plugin";i:1;a:4:{i:0;s:19:"markdowku_headeratx";i:1;b:1;i:2;i:5;i:3;s:14:"
### 捕获组";}i:2;i:2782;}i:379;a:3:{i:0;s:6:"p_open";i:1;a:0:{}i:2;i:2782;}i:380;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:124:"分组编号
:    捕获组通过从左到右计算它的开括号来进行编号；整个正则表达式自己编号为0；";}i:2;i:2798;}i:381;a:3:{i:0;s:7:"p_close";i:1;a:0:{}i:2;i:2922;}i:382;a:3:{i:0;s:6:"p_open";i:1;a:0:{}i:2;i:2922;}i:383;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:70:"(A)(B(C))这个表达式中，我们认为存在这样的四个分组:";}i:2;i:2924;}i:384;a:3:{i:0;s:7:"p_close";i:1;a:0:{}i:2;i:2994;}i:385;a:3:{i:0;s:10:"table_open";i:1;a:3:{i:0;i:2;i:1;i:5;i:2;i:2995;}i:2;i:2994;}i:386;a:3:{i:0;s:13:"tablerow_open";i:1;a:0:{}i:2;i:2994;}i:387;a:3:{i:0;s:14:"tablecell_open";i:1;a:3:{i:0;i:1;i:1;N;i:2;i:1;}i:2;i:2994;}i:388;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:7:"编号 ";}i:2;i:2996;}i:389;a:3:{i:0;s:15:"tablecell_close";i:1;a:0:{}i:2;i:3003;}i:390;a:3:{i:0;s:14:"tablecell_open";i:1;a:3:{i:0;i:1;i:1;N;i:2;i:1;}i:2;i:3003;}i:391;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:7:" 分组";}i:2;i:3004;}i:392;a:3:{i:0;s:15:"tablecell_close";i:1;a:0:{}i:2;i:3011;}i:393;a:3:{i:0;s:14:"tablerow_close";i:1;a:0:{}i:2;i:3012;}i:394;a:3:{i:0;s:13:"tablerow_open";i:1;a:0:{}i:2;i:3012;}i:395;a:3:{i:0;s:14:"tablecell_open";i:1;a:3:{i:0;i:1;i:1;N;i:2;i:1;}i:2;i:3012;}i:396;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:1:"0";}i:2;i:3014;}i:397;a:3:{i:0;s:15:"tablecell_close";i:1;a:0:{}i:2;i:3015;}i:398;a:3:{i:0;s:14:"tablecell_open";i:1;a:3:{i:0;i:1;i:1;N;i:2;i:1;}i:2;i:3015;}i:399;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:10:" (A)(B(C))";}i:2;i:3016;}i:400;a:3:{i:0;s:15:"tablecell_close";i:1;a:0:{}i:2;i:3026;}i:401;a:3:{i:0;s:14:"tablerow_close";i:1;a:0:{}i:2;i:3027;}i:402;a:3:{i:0;s:13:"tablerow_open";i:1;a:0:{}i:2;i:3027;}i:403;a:3:{i:0;s:14:"tablecell_open";i:1;a:3:{i:0;i:1;i:1;N;i:2;i:1;}i:2;i:3027;}i:404;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:1:"1";}i:2;i:3029;}i:405;a:3:{i:0;s:15:"tablecell_close";i:1;a:0:{}i:2;i:3030;}i:406;a:3:{i:0;s:14:"tablecell_open";i:1;a:3:{i:0;i:1;i:1;N;i:2;i:1;}i:2;i:3030;}i:407;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:4:" (A)";}i:2;i:3031;}i:408;a:3:{i:0;s:15:"tablecell_close";i:1;a:0:{}i:2;i:3035;}i:409;a:3:{i:0;s:14:"tablerow_close";i:1;a:0:{}i:2;i:3036;}i:410;a:3:{i:0;s:13:"tablerow_open";i:1;a:0:{}i:2;i:3036;}i:411;a:3:{i:0;s:14:"tablecell_open";i:1;a:3:{i:0;i:1;i:1;N;i:2;i:1;}i:2;i:3036;}i:412;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:1:"2";}i:2;i:3038;}i:413;a:3:{i:0;s:15:"tablecell_close";i:1;a:0:{}i:2;i:3039;}i:414;a:3:{i:0;s:14:"tablecell_open";i:1;a:3:{i:0;i:1;i:1;N;i:2;i:1;}i:2;i:3039;}i:415;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:7:" (B(C))";}i:2;i:3040;}i:416;a:3:{i:0;s:15:"tablecell_close";i:1;a:0:{}i:2;i:3047;}i:417;a:3:{i:0;s:14:"tablerow_close";i:1;a:0:{}i:2;i:3048;}i:418;a:3:{i:0;s:13:"tablerow_open";i:1;a:0:{}i:2;i:3048;}i:419;a:3:{i:0;s:14:"tablecell_open";i:1;a:3:{i:0;i:1;i:1;N;i:2;i:1;}i:2;i:3048;}i:420;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:1:"3";}i:2;i:3050;}i:421;a:3:{i:0;s:15:"tablecell_close";i:1;a:0:{}i:2;i:3051;}i:422;a:3:{i:0;s:14:"tablecell_open";i:1;a:3:{i:0;i:1;i:1;N;i:2;i:1;}i:2;i:3051;}i:423;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:4:" (C)";}i:2;i:3052;}i:424;a:3:{i:0;s:15:"tablecell_close";i:1;a:0:{}i:2;i:3056;}i:425;a:3:{i:0;s:14:"tablerow_close";i:1;a:0:{}i:2;i:3057;}i:426;a:3:{i:0;s:11:"table_close";i:1;a:1:{i:0;i:3057;}i:2;i:3057;}i:427;a:3:{i:0;s:6:"p_open";i:1;a:0:{}i:2;i:3057;}i:428;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:108:"这样我们就可以在匹配操作完成后从匹配器通过序列号来获取对应匹配子序列了。";}i:2;i:3059;}i:429;a:3:{i:0;s:7:"p_close";i:1;a:0:{}i:2;i:3167;}i:430;a:3:{i:0;s:6:"p_open";i:1;a:0:{}i:2;i:3167;}i:431;a:3:{i:0;s:6:"plugin";i:1;a:4:{i:0;s:20:"markdowku_codespans1";i:1;a:1:{i:0;s:12:"`(['"]).*\1`";}i:2;i:5;i:3;s:12:"`(['"]).*\1`";}i:2;i:3169;}i:432;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:48:"，其中\1就是对引号这个分组的引用
";}i:2;i:3181;}i:433;a:3:{i:0;s:6:"plugin";i:1;a:4:{i:0;s:20:"markdowku_codespans1";i:1;a:1:{i:0;s:10:"`(\d)\1\1`";}i:2;i:5;i:3;s:10:"`(\d)\1\1`";}i:2;i:3229;}i:434;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:32:" 匹配连续出现3次的数字";}i:2;i:3239;}i:435;a:3:{i:0;s:7:"p_close";i:1;a:0:{}i:2;i:3272;}i:436;a:3:{i:0;s:13:"section_close";i:1;a:0:{}i:2;i:3272;}i:437;a:3:{i:0;s:6:"header";i:1;a:3:{i:0;s:13:"特殊形式:";i:1;i:4;i:2;i:3272;}i:2;i:3272;}i:438;a:3:{i:0;s:12:"section_open";i:1;a:1:{i:0;i:4;}i:2;i:3272;}i:439;a:3:{i:0;s:6:"plugin";i:1;a:4:{i:0;s:19:"markdowku_headeratx";i:1;b:1;i:2;i:5;i:3;s:19:"
#### 特殊形式:";}i:2;i:3272;}i:440;a:3:{i:0;s:6:"p_open";i:1;a:0:{}i:2;i:3272;}i:441;a:3:{i:0;s:6:"plugin";i:1;a:4:{i:0;s:20:"markdowku_codespans1";i:1;a:1:{i:0;s:14:"`(?<name>exp)`";}i:2;i:5;i:3;s:14:"`(?<name>exp)`";}i:2;i:3293;}i:442;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:75:"  自己命名分组，匹配的文本捕获到命名的name组内，使用";}i:2;i:3307;}i:443;a:3:{i:0;s:6:"plugin";i:1;a:4:{i:0;s:20:"markdowku_codespans1";i:1;a:1:{i:0;s:10:"`\k<name>`";}i:2;i:5;i:3;s:10:"`\k<name>`";}i:2;i:3382;}i:444;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:22:"引用捕获的内容
";}i:2;i:3392;}i:445;a:3:{i:0;s:6:"plugin";i:1;a:4:{i:0;s:20:"markdowku_codespans1";i:1;a:1:{i:0;s:13:"`(?#comment)`";}i:2;i:5;i:3;s:13:"`(?#comment)`";}i:2;i:3414;}i:446;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:40:" 提供注释，不对正则产生影响";}i:2;i:3427;}i:447;a:3:{i:0;s:7:"p_close";i:1;a:0:{}i:2;i:3468;}i:448;a:3:{i:0;s:13:"section_close";i:1;a:0:{}i:2;i:3468;}i:449;a:3:{i:0;s:6:"header";i:1;a:3:{i:0;s:12:"非捕获组";i:1;i:3;i:2;i:3468;}i:2;i:3468;}i:450;a:3:{i:0;s:12:"section_open";i:1;a:1:{i:0;i:3;}i:2;i:3468;}i:451;a:3:{i:0;s:6:"plugin";i:1;a:4:{i:0;s:19:"markdowku_headeratx";i:1;b:1;i:2;i:5;i:3;s:17:"
### 非捕获组";}i:2;i:3468;}i:452;a:3:{i:0;s:6:"p_open";i:1;a:0:{}i:2;i:3468;}i:453;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:123:"非捕获组一般情况下是以(?)开头的组。它不捕获文本也不对组合进行计数。他有下面几种形式";}i:2;i:3487;}i:454;a:3:{i:0;s:7:"p_close";i:1;a:0:{}i:2;i:3610;}i:455;a:3:{i:0;s:13:"section_close";i:1;a:0:{}i:2;i:3612;}i:456;a:3:{i:0;s:6:"header";i:1;a:3:{i:0;s:19:"1.(?:Pattern)形式";i:1;i:4;i:2;i:3612;}i:2;i:3612;}i:457;a:3:{i:0;s:12:"section_open";i:1;a:1:{i:0;i:4;}i:2;i:3612;}i:458;a:3:{i:0;s:6:"plugin";i:1;a:4:{i:0;s:19:"markdowku_headeratx";i:1;b:1;i:2;i:5;i:3;s:25:"
#### 1.(?:Pattern)形式";}i:2;i:3612;}i:459;a:3:{i:0;s:6:"p_open";i:1;a:0:{}i:2;i:3612;}i:460;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:175:"它的作用就是匹配Pattern字符，好处就是不捕获文本，不将匹配的字符存在内存中，更省内存
例子：(?:a|A)123(?:b)可以匹配a123b 或者A123b";}i:2;i:3639;}i:461;a:3:{i:0;s:7:"p_close";i:1;a:0:{}i:2;i:3815;}i:462;a:3:{i:0;s:13:"section_close";i:1;a:0:{}i:2;i:3815;}i:463;a:3:{i:0;s:6:"header";i:1;a:3:{i:0;s:17:"2.零宽度断言";i:1;i:4;i:2;i:3815;}i:2;i:3815;}i:464;a:3:{i:0;s:12:"section_open";i:1;a:1:{i:0;i:4;}i:2;i:3815;}i:465;a:3:{i:0;s:6:"plugin";i:1;a:4:{i:0;s:19:"markdowku_headeratx";i:1;b:1;i:2;i:5;i:3;s:23:"
#### 2.零宽度断言";}i:2;i:3815;}i:466;a:3:{i:0;s:10:"table_open";i:1;a:3:{i:0;i:3;i:1;i:5;i:2;i:3840;}i:2;i:3839;}i:467;a:3:{i:0;s:13:"tablerow_open";i:1;a:0:{}i:2;i:3839;}i:468;a:3:{i:0;s:14:"tablecell_open";i:1;a:3:{i:0;i:1;i:1;N;i:2;i:1;}i:2;i:3839;}i:469;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:8:" 形式 ";}i:2;i:3841;}i:470;a:3:{i:0;s:15:"tablecell_close";i:1;a:0:{}i:2;i:3849;}i:471;a:3:{i:0;s:14:"tablecell_open";i:1;a:3:{i:0;i:1;i:1;N;i:2;i:1;}i:2;i:3849;}i:472;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:8:" 意义 ";}i:2;i:3850;}i:473;a:3:{i:0;s:15:"tablecell_close";i:1;a:0:{}i:2;i:3858;}i:474;a:3:{i:0;s:14:"tablecell_open";i:1;a:3:{i:0;i:1;i:1;N;i:2;i:1;}i:2;i:3858;}i:475;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:8:" 说明 ";}i:2;i:3859;}i:476;a:3:{i:0;s:15:"tablecell_close";i:1;a:0:{}i:2;i:3867;}i:477;a:3:{i:0;s:14:"tablerow_close";i:1;a:0:{}i:2;i:3868;}i:478;a:3:{i:0;s:13:"tablerow_open";i:1;a:0:{}i:2;i:3868;}i:479;a:3:{i:0;s:14:"tablecell_open";i:1;a:3:{i:0;i:1;i:1;N;i:2;i:1;}i:2;i:3868;}i:480;a:3:{i:0;s:6:"plugin";i:1;a:4:{i:0;s:20:"markdowku_codespans1";i:1;a:1:{i:0;s:9:"`(?= X )`";}i:2;i:5;i:3;s:9:"`(?= X )`";}i:2;i:3870;}i:481;a:3:{i:0;s:15:"tablecell_close";i:1;a:0:{}i:2;i:3879;}i:482;a:3:{i:0;s:14:"tablecell_open";i:1;a:3:{i:0;i:1;i:1;N;i:2;i:1;}i:2;i:3879;}i:483;a:3:{i:0;s:6:"plugin";i:1;a:4:{i:0;s:20:"markdowku_codespans1";i:1;a:1:{i:0;s:38:"`X ，通过零宽度的正 lookahead`";}i:2;i:5;i:3;s:38:"`X ，通过零宽度的正 lookahead`";}i:2;i:3880;}i:484;a:3:{i:0;s:15:"tablecell_close";i:1;a:0:{}i:2;i:3918;}i:485;a:3:{i:0;s:14:"tablecell_open";i:1;a:3:{i:0;i:1;i:1;N;i:2;i:1;}i:2;i:3918;}i:486;a:3:{i:0;s:6:"plugin";i:1;a:4:{i:0;s:20:"markdowku_codespans1";i:1;a:1:{i:0;s:337:"`零宽度正先行断言。仅当子表达式 X 在 此位置的右侧匹配时才继续匹配。也就是说要使此零宽度断言起到我们想要的效果的话，就必须把这个非捕获组放在整个表达式的右侧。例如，/w+(?=/d) 与后跟数字的单词匹配，而不与该数字匹配。此构造不会回溯。`";}i:2;i:5;i:3;s:337:"`零宽度正先行断言。仅当子表达式 X 在 此位置的右侧匹配时才继续匹配。也就是说要使此零宽度断言起到我们想要的效果的话，就必须把这个非捕获组放在整个表达式的右侧。例如，/w+(?=/d) 与后跟数字的单词匹配，而不与该数字匹配。此构造不会回溯。`";}i:2;i:3919;}i:487;a:3:{i:0;s:15:"tablecell_close";i:1;a:0:{}i:2;i:4256;}i:488;a:3:{i:0;s:14:"tablerow_close";i:1;a:0:{}i:2;i:4257;}i:489;a:3:{i:0;s:13:"tablerow_open";i:1;a:0:{}i:2;i:4257;}i:490;a:3:{i:0;s:14:"tablecell_open";i:1;a:3:{i:0;i:1;i:1;N;i:2;i:1;}i:2;i:4257;}i:491;a:3:{i:0;s:6:"plugin";i:1;a:4:{i:0;s:20:"markdowku_codespans1";i:1;a:1:{i:0;s:9:"`(?! X )`";}i:2;i:5;i:3;s:9:"`(?! X )`";}i:2;i:4259;}i:492;a:3:{i:0;s:15:"tablecell_close";i:1;a:0:{}i:2;i:4268;}i:493;a:3:{i:0;s:14:"tablecell_open";i:1;a:3:{i:0;i:1;i:1;N;i:2;i:1;}i:2;i:4268;}i:494;a:3:{i:0;s:6:"plugin";i:1;a:4:{i:0;s:20:"markdowku_codespans1";i:1;a:1:{i:0;s:38:"`X ，通过零宽度的负 lookahead`";}i:2;i:5;i:3;s:38:"`X ，通过零宽度的负 lookahead`";}i:2;i:4269;}i:495;a:3:{i:0;s:15:"tablecell_close";i:1;a:0:{}i:2;i:4307;}i:496;a:3:{i:0;s:14:"tablecell_open";i:1;a:3:{i:0;i:1;i:1;N;i:2;i:1;}i:2;i:4307;}i:497;a:3:{i:0;s:6:"plugin";i:1;a:4:{i:0;s:20:"markdowku_codespans1";i:1;a:1:{i:0;s:194:"`零宽度负先行断言。仅当子表达式 X 不在 此位置的右侧匹配时才继续匹配。例如，例如，/w+(?!/d) 与后不跟数字的单词匹配，而不与该数字匹配 。`";}i:2;i:5;i:3;s:194:"`零宽度负先行断言。仅当子表达式 X 不在 此位置的右侧匹配时才继续匹配。例如，例如，/w+(?!/d) 与后不跟数字的单词匹配，而不与该数字匹配 。`";}i:2;i:4308;}i:498;a:3:{i:0;s:15:"tablecell_close";i:1;a:0:{}i:2;i:4502;}i:499;a:3:{i:0;s:14:"tablerow_close";i:1;a:0:{}i:2;i:4503;}i:500;a:3:{i:0;s:13:"tablerow_open";i:1;a:0:{}i:2;i:4503;}i:501;a:3:{i:0;s:14:"tablecell_open";i:1;a:3:{i:0;i:1;i:1;N;i:2;i:1;}i:2;i:4503;}i:502;a:3:{i:0;s:6:"plugin";i:1;a:4:{i:0;s:20:"markdowku_codespans1";i:1;a:1:{i:0;s:10:"`(?<= X )`";}i:2;i:5;i:3;s:10:"`(?<= X )`";}i:2;i:4505;}i:503;a:3:{i:0;s:15:"tablecell_close";i:1;a:0:{}i:2;i:4515;}i:504;a:3:{i:0;s:14:"tablecell_open";i:1;a:3:{i:0;i:1;i:1;N;i:2;i:1;}i:2;i:4515;}i:505;a:3:{i:0;s:6:"plugin";i:1;a:4:{i:0;s:20:"markdowku_codespans1";i:1;a:1:{i:0;s:39:"`X ，通过零宽度的正 lookbehind`";}i:2;i:5;i:3;s:39:"`X ，通过零宽度的正 lookbehind`";}i:2;i:4516;}i:506;a:3:{i:0;s:15:"tablecell_close";i:1;a:0:{}i:2;i:4555;}i:507;a:3:{i:0;s:14:"tablecell_open";i:1;a:3:{i:0;i:1;i:1;N;i:2;i:1;}i:2;i:4555;}i:508;a:3:{i:0;s:6:"plugin";i:1;a:4:{i:0;s:20:"markdowku_codespans1";i:1;a:1:{i:0;s:186:"`零宽度正后发断言。仅当子表达式 X 在 此位置的左侧匹配时才继续匹配。例如，(?<=19)99 与跟在 19 后面的 99 的实例匹配。此构造不会回溯。`";}i:2;i:5;i:3;s:186:"`零宽度正后发断言。仅当子表达式 X 在 此位置的左侧匹配时才继续匹配。例如，(?<=19)99 与跟在 19 后面的 99 的实例匹配。此构造不会回溯。`";}i:2;i:4556;}i:509;a:3:{i:0;s:15:"tablecell_close";i:1;a:0:{}i:2;i:4742;}i:510;a:3:{i:0;s:14:"tablerow_close";i:1;a:0:{}i:2;i:4743;}i:511;a:3:{i:0;s:13:"tablerow_open";i:1;a:0:{}i:2;i:4743;}i:512;a:3:{i:0;s:14:"tablecell_open";i:1;a:3:{i:0;i:1;i:1;N;i:2;i:1;}i:2;i:4743;}i:513;a:3:{i:0;s:6:"plugin";i:1;a:4:{i:0;s:20:"markdowku_codespans1";i:1;a:1:{i:0;s:10:"`(?<! X )`";}i:2;i:5;i:3;s:10:"`(?<! X )`";}i:2;i:4745;}i:514;a:3:{i:0;s:15:"tablecell_close";i:1;a:0:{}i:2;i:4755;}i:515;a:3:{i:0;s:14:"tablecell_open";i:1;a:3:{i:0;i:1;i:1;N;i:2;i:1;}i:2;i:4755;}i:516;a:3:{i:0;s:6:"plugin";i:1;a:4:{i:0;s:20:"markdowku_codespans1";i:1;a:1:{i:0;s:39:"`X ，通过零宽度的负 lookbehind`";}i:2;i:5;i:3;s:39:"`X ，通过零宽度的负 lookbehind`";}i:2;i:4756;}i:517;a:3:{i:0;s:15:"tablecell_close";i:1;a:0:{}i:2;i:4795;}i:518;a:3:{i:0;s:14:"tablecell_open";i:1;a:3:{i:0;i:1;i:1;N;i:2;i:1;}i:2;i:4795;}i:519;a:3:{i:0;s:6:"plugin";i:1;a:4:{i:0;s:20:"markdowku_codespans1";i:1;a:1:{i:0;s:164:"`零宽度负后发断言。仅当子表达式 X 不在此位置的左侧匹配时才继续匹配。例如，(?<!19)99 与不跟在 19 后面的 99 的实例匹配`";}i:2;i:5;i:3;s:164:"`零宽度负后发断言。仅当子表达式 X 不在此位置的左侧匹配时才继续匹配。例如，(?<!19)99 与不跟在 19 后面的 99 的实例匹配`";}i:2;i:4796;}i:520;a:3:{i:0;s:15:"tablecell_close";i:1;a:0:{}i:2;i:4960;}i:521;a:3:{i:0;s:14:"tablerow_close";i:1;a:0:{}i:2;i:4961;}i:522;a:3:{i:0;s:11:"table_close";i:1;a:1:{i:0;i:4961;}i:2;i:4961;}i:523;a:3:{i:0;s:6:"p_open";i:1;a:0:{}i:2;i:4961;}i:524;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:425:"例子：
1. (?< !4)56(?=9) 匹配后面的文本56前面不能是4，后面不能是9   5569能够匹配
2. 提取字符串 da12bka3434bdca4343bdca234bm中包含在字符a和b之间的数字，但是这个a之前的字符不能是c；b后面的字符必须是d才能提取。显然，这里就只有3434这个数字满足要求。那么我们怎么提取呢？首先，我们写出含有捕获组的正则表达式：[^c]a\d";}i:2;i:4963;}i:525;a:3:{i:0;s:6:"plugin";i:1;a:4:{i:0;s:24:"markdowku_italicasterisk";i:1;a:2:{i:0;i:1;i:1;s:1:"*";}i:2;i:1;i:3;s:1:"*";}i:2;i:5388;}i:526;a:3:{i:0;s:6:"plugin";i:1;a:4:{i:0;s:24:"markdowku_italicasterisk";i:1;a:2:{i:0;i:3;i:1;s:65:"bd;然后我们再将其变为非捕获组的正则表达式：(?";}i:2;i:3;i:3;s:65:"bd;然后我们再将其变为非捕获组的正则表达式：(?";}i:2;i:5389;}i:527;a:3:{i:0;s:6:"entity";i:1;a:1:{i:0;s:2:"<=";}i:2;i:5454;}i:528;a:3:{i:0;s:6:"plugin";i:1;a:4:{i:0;s:24:"markdowku_italicasterisk";i:1;a:2:{i:0;i:3;i:1;s:8:"[^c]a)\d";}i:2;i:3;i:3;s:8:"[^c]a)\d";}i:2;i:5456;}i:529;a:3:{i:0;s:6:"plugin";i:1;a:4:{i:0;s:24:"markdowku_italicasterisk";i:1;a:2:{i:0;i:4;i:1;s:1:"*";}i:2;i:4;i:3;s:1:"*";}i:2;i:5464;}i:530;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:6:"(?=bd)";}i:2;i:5465;}i:531;a:3:{i:0;s:7:"p_close";i:1;a:0:{}i:2;i:5472;}i:532;a:3:{i:0;s:13:"section_close";i:1;a:0:{}i:2;i:5472;}i:533;a:3:{i:0;s:6:"header";i:1;a:3:{i:0;s:27:"正则表达式匹配原理";i:1;i:2;i:2;i:5472;}i:2;i:5472;}i:534;a:3:{i:0;s:12:"section_open";i:1;a:1:{i:0;i:2;}i:2;i:5472;}i:535;a:3:{i:0;s:6:"plugin";i:1;a:4:{i:0;s:19:"markdowku_headeratx";i:1;b:1;i:2;i:5;i:3;s:31:"
## 正则表达式匹配原理";}i:2;i:5472;}i:536;a:3:{i:0;s:6:"p_open";i:1;a:0:{}i:2;i:5472;}i:537;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:24:"匹配的两个原则：";}i:2;i:5505;}i:538;a:3:{i:0;s:7:"p_close";i:1;a:0:{}i:2;i:5529;}i:539;a:3:{i:0;s:10:"listo_open";i:1;a:0:{}i:2;i:5529;}i:540;a:3:{i:0;s:13:"listitem_open";i:1;a:1:{i:0;i:1;}i:2;i:5529;}i:541;a:3:{i:0;s:16:"listcontent_open";i:1;a:0:{}i:2;i:5529;}i:542;a:3:{i:0;s:6:"plugin";i:1;a:4:{i:0;s:16:"markdowku_olists";i:1;b:1;i:2;i:1;i:3;s:5:"

1. ";}i:2;i:5529;}i:543;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:36:"优先选择最左边的匹配结果";}i:2;i:5534;}i:544;a:3:{i:0;s:6:"plugin";i:1;a:4:{i:0;s:16:"markdowku_olists";i:1;b:1;i:2;i:3;i:3;s:36:"优先选择最左边的匹配结果";}i:2;i:5534;}i:545;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:1:"
";}i:2;i:5570;}i:546;a:3:{i:0;s:17:"listcontent_close";i:1;a:0:{}i:2;i:5571;}i:547;a:3:{i:0;s:14:"listitem_close";i:1;a:0:{}i:2;i:5571;}i:548;a:3:{i:0;s:13:"listitem_open";i:1;a:1:{i:0;i:0;}i:2;i:5571;}i:549;a:3:{i:0;s:16:"listcontent_open";i:1;a:0:{}i:2;i:5571;}i:550;a:3:{i:0;s:6:"plugin";i:1;a:4:{i:0;s:16:"markdowku_olists";i:1;b:1;i:2;i:2;i:3;s:4:"
2. ";}i:2;i:5571;}i:551;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:24:"标准的匹配量词（";}i:2;i:5575;}i:552;a:3:{i:0;s:6:"plugin";i:1;a:4:{i:0;s:16:"markdowku_olists";i:1;b:1;i:2;i:3;i:3;s:24:"标准的匹配量词（";}i:2;i:5575;}i:553;a:3:{i:0;s:6:"plugin";i:1;a:4:{i:0;s:28:"markdowku_escapespecialchars";i:1;a:2:{i:0;i:5;i:1;s:2:"\*";}i:2;i:5;i:3;s:2:"\*";}i:2;i:5599;}i:554;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:36:" + ？ {m,n}）是优先匹配的；";}i:2;i:5601;}i:555;a:3:{i:0;s:6:"plugin";i:1;a:4:{i:0;s:16:"markdowku_olists";i:1;b:1;i:2;i:3;i:3;s:36:" + ？ {m,n}）是优先匹配的；";}i:2;i:5601;}i:556;a:3:{i:0;s:17:"listcontent_close";i:1;a:0:{}i:2;i:5637;}i:557;a:3:{i:0;s:14:"listitem_close";i:1;a:0:{}i:2;i:5637;}i:558;a:3:{i:0;s:11:"listo_close";i:1;a:0:{}i:2;i:5637;}i:559;a:3:{i:0;s:6:"plugin";i:1;a:4:{i:0;s:16:"markdowku_olists";i:1;b:1;i:2;i:4;i:3;s:1:"
";}i:2;i:5637;}i:560;a:3:{i:0;s:10:"quote_open";i:1;a:0:{}i:2;i:5638;}i:561;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:87:"（量词优先会导致NFA匹配问题，使用懒惰模式可以忽略量词优先）";}i:2;i:5638;}i:562;a:3:{i:0;s:6:"plugin";i:1;a:4:{i:0;s:21:"markdowku_blockquotes";i:1;b:1;i:2;i:1;i:3;s:89:"
>（量词优先会导致NFA匹配问题，使用懒惰模式可以忽略量词优先）";}i:2;i:5638;}i:563;a:3:{i:0;s:11:"quote_close";i:1;a:0:{}i:2;i:5727;}i:564;a:3:{i:0;s:6:"plugin";i:1;a:4:{i:0;s:21:"markdowku_blockquotes";i:1;b:1;i:2;i:4;i:3;s:2:"

";}i:2;i:5727;}i:565;a:3:{i:0;s:13:"section_close";i:1;a:0:{}i:2;i:5729;}i:566;a:3:{i:0;s:6:"header";i:1;a:3:{i:0;s:12:"正则引擎";i:1;i:3;i:2;i:5729;}i:2;i:5729;}i:567;a:3:{i:0;s:12:"section_open";i:1;a:1:{i:0;i:3;}i:2;i:5729;}i:568;a:3:{i:0;s:6:"plugin";i:1;a:4:{i:0;s:19:"markdowku_headeratx";i:1;b:1;i:2;i:5;i:3;s:18:"
### 正则引擎 ";}i:2;i:5729;}i:569;a:3:{i:0;s:10:"table_open";i:1;a:3:{i:0;i:2;i:1;i:5;i:2;i:5749;}i:2;i:5748;}i:570;a:3:{i:0;s:13:"tablerow_open";i:1;a:0:{}i:2;i:5748;}i:571;a:3:{i:0;s:14:"tablecell_open";i:1;a:3:{i:0;i:1;i:1;N;i:2;i:1;}i:2;i:5748;}i:572;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:12:"引擎类型";}i:2;i:5750;}i:573;a:3:{i:0;s:15:"tablecell_close";i:1;a:0:{}i:2;i:5762;}i:574;a:3:{i:0;s:14:"tablecell_open";i:1;a:3:{i:0;i:1;i:1;s:5:"right";i:2;i:1;}i:2;i:5762;}i:575;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:7:"	程序";}i:2;i:5763;}i:576;a:3:{i:0;s:15:"tablecell_close";i:1;a:0:{}i:2;i:5770;}i:577;a:3:{i:0;s:14:"tablerow_close";i:1;a:0:{}i:2;i:5771;}i:578;a:3:{i:0;s:13:"tablerow_open";i:1;a:0:{}i:2;i:5771;}i:579;a:3:{i:0;s:14:"tablecell_open";i:1;a:3:{i:0;i:1;i:1;s:4:"left";i:2;i:1;}i:2;i:5771;}i:580;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:4:"DFA	";}i:2;i:5773;}i:581;a:3:{i:0;s:15:"tablecell_close";i:1;a:0:{}i:2;i:5777;}i:582;a:3:{i:0;s:14:"tablecell_open";i:1;a:3:{i:0;i:1;i:1;N;i:2;i:1;}i:2;i:5777;}i:583;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:81:"awk(大多数版本)、egrep（大多数版本）、flex、lex、MySQL、Procmail";}i:2;i:5778;}i:584;a:3:{i:0;s:15:"tablecell_close";i:1;a:0:{}i:2;i:5859;}i:585;a:3:{i:0;s:14:"tablerow_close";i:1;a:0:{}i:2;i:5860;}i:586;a:3:{i:0;s:13:"tablerow_open";i:1;a:0:{}i:2;i:5860;}i:587;a:3:{i:0;s:14:"tablecell_open";i:1;a:3:{i:0;i:1;i:1;s:4:"left";i:2;i:1;}i:2;i:5860;}i:588;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:14:"传统型 NFA	";}i:2;i:5862;}i:589;a:3:{i:0;s:15:"tablecell_close";i:1;a:0:{}i:2;i:5876;}i:590;a:3:{i:0;s:14:"tablecell_open";i:1;a:3:{i:0;i:1;i:1;N;i:2;i:1;}i:2;i:5876;}i:591;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:174:"GNU Emacs、Java、grep（大多数版本）、less、more、.NET语言、PCRE library、Perl、PHP（所有三套正则库）、Python、Ruby、set（大多数版本）、vi";}i:2;i:5877;}i:592;a:3:{i:0;s:15:"tablecell_close";i:1;a:0:{}i:2;i:6051;}i:593;a:3:{i:0;s:14:"tablerow_close";i:1;a:0:{}i:2;i:6052;}i:594;a:3:{i:0;s:13:"tablerow_open";i:1;a:0:{}i:2;i:6052;}i:595;a:3:{i:0;s:14:"tablecell_open";i:1;a:3:{i:0;i:1;i:1;s:4:"left";i:2;i:1;}i:2;i:6052;}i:596;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:10:"POSIX NFA	";}i:2;i:6054;}i:597;a:3:{i:0;s:15:"tablecell_close";i:1;a:0:{}i:2;i:6064;}i:598;a:3:{i:0;s:14:"tablecell_open";i:1;a:3:{i:0;i:1;i:1;N;i:2;i:1;}i:2;i:6064;}i:599;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:77:"mawk、Mortice Lern System's utilities、GUN Emacs（明确指定时使用）";}i:2;i:6065;}i:600;a:3:{i:0;s:15:"tablecell_close";i:1;a:0:{}i:2;i:6142;}i:601;a:3:{i:0;s:14:"tablerow_close";i:1;a:0:{}i:2;i:6143;}i:602;a:3:{i:0;s:13:"tablerow_open";i:1;a:0:{}i:2;i:6143;}i:603;a:3:{i:0;s:14:"tablecell_open";i:1;a:3:{i:0;i:1;i:1;s:4:"left";i:2;i:1;}i:2;i:6143;}i:604;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:14:"DFA/NFA混合	";}i:2;i:6145;}i:605;a:3:{i:0;s:15:"tablecell_close";i:1;a:0:{}i:2;i:6159;}i:606;a:3:{i:0;s:14:"tablecell_open";i:1;a:3:{i:0;i:1;i:1;N;i:2;i:1;}i:2;i:6159;}i:607;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:32:"GNU awk、 GNU grep/egrep、 Tcl";}i:2;i:6160;}i:608;a:3:{i:0;s:15:"tablecell_close";i:1;a:0:{}i:2;i:6192;}i:609;a:3:{i:0;s:14:"tablerow_close";i:1;a:0:{}i:2;i:6193;}i:610;a:3:{i:0;s:11:"table_close";i:1;a:1:{i:0;i:6193;}i:2;i:6193;}i:611;a:3:{i:0;s:6:"p_open";i:1;a:0:{}i:2;i:6193;}i:612;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:162:"正则引擎中的零件：
1. 文本字符
2. 字符组，点号，Unicode属性及其他
3. 捕获型括号
4. 锚点  ^ \z  \b等，环视（零宽度断言）";}i:2;i:6196;}i:613;a:3:{i:0;s:7:"p_close";i:1;a:0:{}i:2;i:6359;}i:614;a:3:{i:0;s:13:"section_close";i:1;a:0:{}i:2;i:6359;}i:615;a:3:{i:0;s:6:"header";i:1;a:3:{i:0;s:31:"NFA:非确定型有穷自动机";i:1;i:4;i:2;i:6359;}i:2;i:6359;}i:616;a:3:{i:0;s:12:"section_open";i:1;a:1:{i:0;i:4;}i:2;i:6359;}i:617;a:3:{i:0;s:6:"plugin";i:1;a:4:{i:0;s:19:"markdowku_headeratx";i:1;b:1;i:2;i:5;i:3;s:37:"
#### NFA:非确定型有穷自动机";}i:2;i:6359;}i:618;a:3:{i:0;s:6:"p_open";i:1;a:0:{}i:2;i:6359;}i:619;a:3:{i:0;s:6:"plugin";i:1;a:4:{i:0;s:22:"markdowku_boldasterisk";i:1;a:2:{i:0;i:1;i:1;s:2:"**";}i:2;i:1;i:3;s:2:"**";}i:2;i:6398;}i:620;a:3:{i:0;s:6:"plugin";i:1;a:4:{i:0;s:22:"markdowku_boldasterisk";i:1;a:2:{i:0;i:3;i:1;s:15:"表达式主导";}i:2;i:3;i:3;s:15:"表达式主导";}i:2;i:6400;}i:621;a:3:{i:0;s:6:"plugin";i:1;a:4:{i:0;s:22:"markdowku_boldasterisk";i:1;a:2:{i:0;i:4;i:1;s:2:"**";}i:2;i:4;i:3;s:2:"**";}i:2;i:6415;}i:622;a:3:{i:0;s:6:"entity";i:1;a:1:{i:0;s:3:"---";}i:2;i:6417;}i:623;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:93:"每次取表达式一个字符出来进行文本比对；在比较过程中经常需要进行";}i:2;i:6420;}i:624;a:3:{i:0;s:6:"plugin";i:1;a:4:{i:0;s:22:"markdowku_boldasterisk";i:1;a:2:{i:0;i:1;i:1;s:2:"**";}i:2;i:1;i:3;s:2:"**";}i:2;i:6513;}i:625;a:3:{i:0;s:6:"plugin";i:1;a:4:{i:0;s:22:"markdowku_boldasterisk";i:1;a:2:{i:0;i:3;i:1;s:6:"回溯";}i:2;i:3;i:3;s:6:"回溯";}i:2;i:6515;}i:626;a:3:{i:0;s:6:"plugin";i:1;a:4:{i:0;s:22:"markdowku_boldasterisk";i:1;a:2:{i:0;i:4;i:1;s:2:"**";}i:2;i:4;i:3;s:2:"**";}i:2;i:6521;}i:627;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:127:"；
正则表达式的编写对匹配过程有很大的影响，如果改变表达式的编写方式，效率会有一些差距";}i:2;i:6523;}i:628;a:3:{i:0;s:7:"p_close";i:1;a:0:{}i:2;i:6650;}i:629;a:3:{i:0;s:6:"p_open";i:1;a:0:{}i:2;i:6650;}i:630;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:7:"eg:
用";}i:2;i:6652;}i:631;a:3:{i:0;s:6:"plugin";i:1;a:4:{i:0;s:20:"markdowku_codespans3";i:1;a:1:{i:0;s:10:"```".*"```";}i:2;i:5;i:3;s:10:"```".*"```";}i:2;i:6659;}i:632;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:28:" 匹配双引号下的文本";}i:2;i:6669;}i:633;a:3:{i:0;s:6:"plugin";i:1;a:4:{i:0;s:20:"markdowku_codespans3";i:1;a:1:{i:0;s:62:"```The name "McDonald's" is said "makudonarudo" in Japanese```";}i:2;i:5;i:3;s:62:"```The name "McDonald's" is said "makudonarudo" in Japanese```";}i:2;i:6697;}i:634;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:28:"
一种正确的方法就是";}i:2;i:6759;}i:635;a:3:{i:0;s:6:"plugin";i:1;a:4:{i:0;s:20:"markdowku_codespans3";i:1;a:1:{i:0;s:11:"```[^"]*```";}i:2;i:5;i:3;s:11:"```[^"]*```";}i:2;i:6787;}i:636;a:3:{i:0;s:7:"p_close";i:1;a:0:{}i:2;i:6798;}i:637;a:3:{i:0;s:13:"section_close";i:1;a:0:{}i:2;i:6801;}i:638;a:3:{i:0;s:6:"header";i:1;a:3:{i:0;s:28:"DFA:确定型有穷自动机";i:1;i:4;i:2;i:6801;}i:2;i:6801;}i:639;a:3:{i:0;s:12:"section_open";i:1;a:1:{i:0;i:4;}i:2;i:6801;}i:640;a:3:{i:0;s:6:"plugin";i:1;a:4:{i:0;s:19:"markdowku_headeratx";i:1;b:1;i:2;i:5;i:3;s:34:"
#### DFA:确定型有穷自动机";}i:2;i:6801;}i:641;a:3:{i:0;s:6:"p_open";i:1;a:0:{}i:2;i:6801;}i:642;a:3:{i:0;s:6:"plugin";i:1;a:4:{i:0;s:22:"markdowku_boldasterisk";i:1;a:2:{i:0;i:1;i:1;s:2:"**";}i:2;i:1;i:3;s:2:"**";}i:2;i:6837;}i:643;a:3:{i:0;s:6:"plugin";i:1;a:4:{i:0;s:22:"markdowku_boldasterisk";i:1;a:2:{i:0;i:3;i:1;s:12:"文本主导";}i:2;i:3;i:3;s:12:"文本主导";}i:2;i:6839;}i:644;a:3:{i:0;s:6:"plugin";i:1;a:4:{i:0;s:22:"markdowku_boldasterisk";i:1;a:2:{i:0;i:4;i:1;s:2:"**";}i:2;i:4;i:3;s:2:"**";}i:2;i:6851;}i:645;a:3:{i:0;s:6:"entity";i:1;a:1:{i:0;s:3:"---";}i:2;i:6853;}i:646;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:166:"扫描文本中的每一个字符，记录当前处理的匹配正则表达式的可能性
需要匹配的文本只被扫描一遍，所有效率基本是确定的。";}i:2;i:6856;}i:647;a:3:{i:0;s:7:"p_close";i:1;a:0:{}i:2;i:7023;}i:648;a:3:{i:0;s:13:"section_close";i:1;a:0:{}i:2;i:7023;}i:649;a:3:{i:0;s:6:"header";i:1;a:3:{i:0;s:21:"正则表达式效率";i:1;i:2;i:2;i:7023;}i:2;i:7023;}i:650;a:3:{i:0;s:12:"section_open";i:1;a:1:{i:0;i:2;}i:2;i:7023;}i:651;a:3:{i:0;s:6:"plugin";i:1;a:4:{i:0;s:19:"markdowku_headeratx";i:1;b:1;i:2;i:5;i:3;s:25:"
## 正则表达式效率";}i:2;i:7023;}i:652;a:3:{i:0;s:6:"p_open";i:1;a:0:{}i:2;i:7023;}i:653;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:216:"匹配优先和忽略优先都不会影响需要检测路径本身，而只会影响检测的顺序。如果不能匹配，无论是按照匹配优先还是忽略优先的顺序，最终每条路径都会被测试。";}i:2;i:7050;}i:654;a:3:{i:0;s:7:"p_close";i:1;a:0:{}i:2;i:7266;}i:655;a:3:{i:0;s:13:"section_close";i:1;a:0:{}i:2;i:7266;}i:656;a:3:{i:0;s:6:"header";i:1;a:3:{i:0;s:12:"固化分组";i:1;i:3;i:2;i:7266;}i:2;i:7266;}i:657;a:3:{i:0;s:12:"section_open";i:1;a:1:{i:0;i:3;}i:2;i:7266;}i:658;a:3:{i:0;s:6:"plugin";i:1;a:4:{i:0;s:19:"markdowku_headeratx";i:1;b:1;i:2;i:5;i:3;s:17:"
### 固化分组";}i:2;i:7266;}i:659;a:3:{i:0;s:6:"p_open";i:1;a:0:{}i:2;i:7266;}i:660;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:3:"(?>";}i:2;i:7284;}i:661;a:3:{i:0;s:6:"entity";i:1;a:1:{i:0;s:3:"...";}i:2;i:7287;}i:662;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:62:")就是将上面可能尝试的备用状态全部舍弃掉；
";}i:2;i:7290;}i:663;a:3:{i:0;s:6:"plugin";i:1;a:4:{i:0;s:20:"markdowku_codespans1";i:1;a:1:{i:0;s:13:"`（?>.*?）`";}i:2;i:5;i:3;s:13:"`（?>.*?）`";}i:2;i:7352;}i:664;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:30:"将匹配不到任何字符，";}i:2;i:7365;}i:665;a:3:{i:0;s:6:"plugin";i:1;a:4:{i:0;s:20:"markdowku_codespans1";i:1;a:1:{i:0;s:5:"`.*?`";}i:2;i:5;i:3;s:5:"`.*?`";}i:2;i:7395;}i:666;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:255:"是忽略优先，将这个字符放过去让后面的表达式去检测，但是使用了固话分组，所有的备用状态被舍弃，后面即便无法匹配，也无法回溯到备用状态，所以最后这个表达式将匹配不到任何东西。";}i:2;i:7400;}i:667;a:3:{i:0;s:7:"p_close";i:1;a:0:{}i:2;i:7656;}i:668;a:3:{i:0;s:13:"section_close";i:1;a:0:{}i:2;i:7656;}i:669;a:3:{i:0;s:6:"header";i:1;a:3:{i:0;s:21:"正则表达式使用";i:1;i:2;i:2;i:7656;}i:2;i:7656;}i:670;a:3:{i:0;s:12:"section_open";i:1;a:1:{i:0;i:2;}i:2;i:7656;}i:671;a:3:{i:0;s:6:"plugin";i:1;a:4:{i:0;s:19:"markdowku_headeratx";i:1;b:1;i:2;i:5;i:3;s:25:"
## 正则表达式使用";}i:2;i:7656;}i:672;a:3:{i:0;s:4:"code";i:1;a:2:{i:0;s:302:"

java.util.regex.Pattern   => 编译好的正则表达式
java.util.regex.Matcher   => 对应单独的实例，表示将正则表达式应用到具体的目标字符串上
java.util.regex.MatcherResult  => 封装成功匹配的数据
java.util.regex.PatternSyntaxException => 表达式格式不正确
";i:1;N;}i:2;i:7682;}i:673;a:3:{i:0;s:6:"plugin";i:1;a:4:{i:0;s:26:"markdowku_githubcodeblocks";i:1;b:1;i:2;i:5;i:3;s:308:"
```
java.util.regex.Pattern   => 编译好的正则表达式
java.util.regex.Matcher   => 对应单独的实例，表示将正则表达式应用到具体的目标字符串上
java.util.regex.MatcherResult  => 封装成功匹配的数据
java.util.regex.PatternSyntaxException => 表达式格式不正确
```";}i:2;i:7682;}i:674;a:3:{i:0;s:4:"file";i:1;a:3:{i:0;s:2102:"
public class RegexDemo {
    private static String myText ;
    private static Pattern p;
    @Before
    public void init(){
        myText = "this is my 1st test string 2wd";
        String myRegex = "\\d\\w+";
        p = Pattern.compile(myRegex);
    }
    @Test
    public void regex1(){
        //Pattern.compile(myRegex,Pattern.CASE_INSENSITIVE);//第二个参数是模式参数
        Matcher m = p.matcher(myText);
        while(m.find()) {//对具体的字符串进行检索
            String group = m.group();
            int from = m.start();
            int end = m.end();
            System.out.println("matched " + group + " from " + from + " to " + end);
//            matched 1st from 11 to 14
//            matched 2wd from 27 to 30
        }
    }
    @Test
    public void regex2(){
        Matcher m = p.matcher(myText);
        boolean matches = m.matches();//全匹配
        System.out.println(matches);//false
        System.out.println(myText.matches("(\\w+\\s*)+"));//true
        System.out.println(myText.replaceAll("\\d+","*"));//Pattern.compile().replaceAll()
    }

    @Test
    public void regex3(){
        String regex  = "(?x)(https?)://([^/:]+)   (:(\\d+))?";
        Pattern compile = Pattern.compile(regex);

        String text3 = "<a href='http://regex.info:800/blog'>正则表达式</a>";
        Matcher matcher = compile.matcher(text3);
        if(matcher.find()){
            String group = matcher.group();
            System.out.println(" match all: " +group);

            System.out.println(" protocol: "+matcher.group(1) +" from "+matcher.start(1)+ " to "+matcher.end(1));
            System.out.println(" hostname: "+ matcher.group(2) +" from "+matcher.start(2)+ " to "+matcher.end(2));
            if(matcher.group(4)!=null){
                System.out.println(" port :" + matcher.group(4));
            }else{
                System.out.println(" default port:80");
            }
        }
//        match all: http://regex.info:800
//        protocol: http from 9 to 13
//        hostname: regex.info from 16 to 26
//        port :800
    }

";i:1;s:4:"java";i:2;s:12:"snippet.java";}i:2;i:7991;}i:675;a:3:{i:0;s:6:"plugin";i:1;a:4:{i:0;s:26:"markdowku_githubcodeblocks";i:1;b:1;i:2;i:5;i:3;s:2113:"
```java
public class RegexDemo {
    private static String myText ;
    private static Pattern p;
    @Before
    public void init(){
        myText = "this is my 1st test string 2wd";
        String myRegex = "\\d\\w+";
        p = Pattern.compile(myRegex);
    }
    @Test
    public void regex1(){
        //Pattern.compile(myRegex,Pattern.CASE_INSENSITIVE);//第二个参数是模式参数
        Matcher m = p.matcher(myText);
        while(m.find()) {//对具体的字符串进行检索
            String group = m.group();
            int from = m.start();
            int end = m.end();
            System.out.println("matched " + group + " from " + from + " to " + end);
//            matched 1st from 11 to 14
//            matched 2wd from 27 to 30
        }
    }
    @Test
    public void regex2(){
        Matcher m = p.matcher(myText);
        boolean matches = m.matches();//全匹配
        System.out.println(matches);//false
        System.out.println(myText.matches("(\\w+\\s*)+"));//true
        System.out.println(myText.replaceAll("\\d+","*"));//Pattern.compile().replaceAll()
    }

    @Test
    public void regex3(){
        String regex  = "(?x)(https?)://([^/:]+)   (:(\\d+))?";
        Pattern compile = Pattern.compile(regex);

        String text3 = "<a href='http://regex.info:800/blog'>正则表达式</a>";
        Matcher matcher = compile.matcher(text3);
        if(matcher.find()){
            String group = matcher.group();
            System.out.println(" match all: " +group);

            System.out.println(" protocol: "+matcher.group(1) +" from "+matcher.start(1)+ " to "+matcher.end(1));
            System.out.println(" hostname: "+ matcher.group(2) +" from "+matcher.start(2)+ " to "+matcher.end(2));
            if(matcher.group(4)!=null){
                System.out.println(" port :" + matcher.group(4));
            }else{
                System.out.println(" default port:80");
            }
        }
//        match all: http://regex.info:800
//        protocol: http from 9 to 13
//        hostname: regex.info from 16 to 26
//        port :800
    }

```";}i:2;i:7991;}i:676;a:3:{i:0;s:13:"section_close";i:1;a:0:{}i:2;i:10106;}i:677;a:3:{i:0;s:6:"header";i:1;a:3:{i:0;s:12:"参考文章";i:1;i:2;i:2;i:10106;}i:2;i:10106;}i:678;a:3:{i:0;s:12:"section_open";i:1;a:1:{i:0;i:2;}i:2;i:10106;}i:679;a:3:{i:0;s:6:"plugin";i:1;a:4:{i:0;s:19:"markdowku_headeratx";i:1;b:1;i:2;i:5;i:3;s:16:"
## 参考文章";}i:2;i:10106;}i:680;a:3:{i:0;s:6:"p_open";i:1;a:0:{}i:2;i:10106;}i:681;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:36:"书籍：《精通正则表达式》";}i:2;i:10124;}i:682;a:3:{i:0;s:7:"p_close";i:1;a:0:{}i:2;i:10160;}i:683;a:3:{i:0;s:6:"p_open";i:1;a:0:{}i:2;i:10160;}i:684;a:3:{i:0;s:12:"externallink";i:1;a:2:{i:0;s:65:"http://www.cnblogs.com/kevin-yuan/archive/2012/11/11/2765340.html";i:1;s:47:"正则表达式的高级用法(分组和捕获)";}i:2;i:10162;}i:685;a:3:{i:0;s:6:"plugin";i:1;a:4:{i:0;s:23:"markdowku_anchorsinline";i:1;b:1;i:2;i:5;i:3;s:116:"[正则表达式的高级用法(分组和捕获)](http://www.cnblogs.com/kevin-yuan/archive/2012/11/11/2765340.html)";}i:2;i:10162;}i:686;a:3:{i:0;s:7:"p_close";i:1;a:0:{}i:2;i:10278;}i:687;a:3:{i:0;s:6:"p_open";i:1;a:0:{}i:2;i:10278;}i:688;a:3:{i:0;s:12:"externallink";i:1;a:2:{i:0;s:34:"http://www.zjmainstay.cn/my-regexp";i:1;s:39:"我眼里的正则表达式入门教程";}i:2;i:10280;}i:689;a:3:{i:0;s:6:"plugin";i:1;a:4:{i:0;s:23:"markdowku_anchorsinline";i:1;b:1;i:2;i:5;i:3;s:77:"[我眼里的正则表达式入门教程](http://www.zjmainstay.cn/my-regexp)";}i:2;i:10280;}i:690;a:3:{i:0;s:7:"p_close";i:1;a:0:{}i:2;i:10357;}i:691;a:3:{i:0;s:6:"p_open";i:1;a:0:{}i:2;i:10357;}i:692;a:3:{i:0;s:12:"externallink";i:1;a:2:{i:0;s:36:"http://www.zjmainstay.cn/deep-regexp";i:1;s:39:"深入理解正则表达式高级教程";}i:2;i:10359;}i:693;a:3:{i:0;s:6:"plugin";i:1;a:4:{i:0;s:23:"markdowku_anchorsinline";i:1;b:1;i:2;i:5;i:3;s:79:"[深入理解正则表达式高级教程](http://www.zjmainstay.cn/deep-regexp)";}i:2;i:10359;}i:694;a:3:{i:0;s:7:"p_close";i:1;a:0:{}i:2;i:10438;}i:695;a:3:{i:0;s:6:"p_open";i:1;a:0:{}i:2;i:10438;}i:696;a:3:{i:0;s:12:"externallink";i:1;a:2:{i:0;s:45:"http://deerchao.net/tutorials/regex/regex.htm";i:1;s:35:"正则表达式30分钟入门教程";}i:2;i:10440;}i:697;a:3:{i:0;s:6:"plugin";i:1;a:4:{i:0;s:23:"markdowku_anchorsinline";i:1;b:1;i:2;i:5;i:3;s:84:"[正则表达式30分钟入门教程](http://deerchao.net/tutorials/regex/regex.htm)";}i:2;i:10440;}i:698;a:3:{i:0;s:7:"p_close";i:1;a:0:{}i:2;i:10524;}i:699;a:3:{i:0;s:6:"p_open";i:1;a:0:{}i:2;i:10524;}i:700;a:3:{i:0;s:12:"externallink";i:1;a:2:{i:0;s:46:"http://deerchao.net/tutorials/regex/common.htm";i:1;s:21:"常用正则表达式";}i:2;i:10526;}i:701;a:3:{i:0;s:6:"plugin";i:1;a:4:{i:0;s:23:"markdowku_anchorsinline";i:1;b:1;i:2;i:5;i:3;s:71:"[常用正则表达式](http://deerchao.net/tutorials/regex/common.htm)";}i:2;i:10526;}i:702;a:3:{i:0;s:7:"p_close";i:1;a:0:{}i:2;i:10597;}i:703;a:3:{i:0;s:6:"p_open";i:1;a:0:{}i:2;i:10597;}i:704;a:3:{i:0;s:12:"externallink";i:1;a:2:{i:0;s:29:"http://tool.chinaz.com/regex/";i:1;s:24:"正则在线测试工具";}i:2;i:10599;}i:705;a:3:{i:0;s:6:"plugin";i:1;a:4:{i:0;s:23:"markdowku_anchorsinline";i:1;b:1;i:2;i:5;i:3;s:57:"[正则在线测试工具](http://tool.chinaz.com/regex/)";}i:2;i:10599;}i:706;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:0:"";}i:2;i:10656;}i:707;a:3:{i:0;s:7:"p_close";i:1;a:0:{}i:2;i:10656;}i:708;a:3:{i:0;s:13:"section_close";i:1;a:0:{}i:2;i:10656;}i:709;a:3:{i:0;s:12:"document_end";i:1;a:0:{}i:2;i:10656;}}